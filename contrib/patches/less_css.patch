--- smallstuff/less.js  1.3.3
+++ smallstuff/less.js  trunk
@@ -1,3 +1,11 @@
+var window = {};
+var EXPORTED_SYMBOLS = [];
+
+window.less = {};
+less = window.less;
+
+(function() {
+
 //
 // LESS - Leaner CSS v1.3.3
 // http://lesscss.org
@@ -223,6 +231,8 @@
             var that = this;
             this.queue.push(path);
 
+            koLess.addToHierarchy(path, env.sheet.href);
+            
             //
             // Import a file asynchronously
             //
@@ -353,9 +363,9 @@
 
     function getInput(e, env) {
         if (e.filename && env.filename && (e.filename !== env.filename)) {
-            return parser.imports.contents[e.filename];
+            return parser.imports.contents[e.filename] || "";
         } else {
-            return input;
+            return input || "";
         }
     }
 
@@ -1636,7 +1646,7 @@
         // We pass `true` as 3rd argument, to force the reload of the import.
         // This is so we can get the syntax tree as opposed to just the CSS output,
         // as we need this to evaluate the current stylesheet.
-        loadStyleSheet({ 
+        koLess.loadSheet({
             href: path, 
             title: path, 
             type: env.mime, 
@@ -1651,7 +1661,7 @@
             } else {
                 callback.call(null, e, root, path);
             }
-        }, true);
+        });
     };
 }
 
@@ -3239,8 +3249,11 @@
 tree.Rule.prototype.toCSS = function (env) {
     if (this.variable) { return "" }
     else {
+        var value = this.value.toCSS(env);
+        if (value == 'disabled') return;
+
         return this.name + (env.compress ? ':' : ': ') +
-               this.value.toCSS(env) +
+               value +
                this.important + (this.inline ? "" : ";");
     }
 };
@@ -3828,6 +3841,7 @@
             }
         })) { 
             this.evaluating = false;
+            
             return variable;
         }
         else {
@@ -3889,14 +3903,9 @@
 // browser.js - client-side engine
 //
 
-var isFileProtocol = /^(file|chrome(-extension)?|resource|qrc|app):/.test(location.protocol);
+var isFileProtocol = true;
 
-less.env = less.env || (location.hostname == '127.0.0.1' ||
-                        location.hostname == '0.0.0.0'   ||
-                        location.hostname == 'localhost' ||
-                        location.port.length > 0         ||
-                        isFileProtocol                   ? 'development'
-                                                         : 'production');
+less.env = 'production'; // 'development'
 
 // Load styles asynchronously (default: false)
 //
@@ -3917,7 +3926,7 @@
    }
 }
 
-var dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(location.hash);
+var dumpLineNumbers = false;
 if (dumpLineNumbers) {
     less.dumpLineNumbers = dumpLineNumbers[1];
 }
@@ -3952,10 +3961,6 @@
 	}
 }
 
-if (/!watch/.test(location.hash)) {
-	less.watch();
-}
-
 var cache = null;
 
 if (less.env != 'development') {
@@ -3965,21 +3970,6 @@
 }
 
 //
-// Get all <link> tags with the 'rel' attribute set to "stylesheet/less"
-//
-var links = document.getElementsByTagName('link');
-var typePattern = /^text\/(x-)?less$/;
-
-less.sheets = [];
-
-for (var i = 0; i < links.length; i++) {
-    if (links[i].rel === 'stylesheet/less' || (links[i].rel.match(/stylesheet/) &&
-       (links[i].type.match(typePattern)))) {
-        less.sheets.push(links[i]);
-    }
-}
-
-//
 // With this function, it's possible to alter variables and re-render
 // CSS without reloading less-files
 //
@@ -4015,8 +4005,6 @@
 };
 less.refreshStyles = loadStyles;
 
-less.refresh(less.env === 'development');
-
 function loadStyles() {
     var styles = document.getElementsByTagName('style');
     for (var i = 0; i < styles.length; i++) {
@@ -4114,83 +4102,6 @@
     return returner;
 }
 
-function loadStyleSheet(sheet, callback, reload, remaining) {
-    // sheet may be set to the stylesheet for the initial load or a collection of properties including
-    // some env variables for imports
-    var contents  = sheet.contents || {};
-    var files     = sheet.files || {};
-    var hrefParts = extractUrlParts(sheet.href, window.location.href);
-    var href      = hrefParts.url;
-    var css       = cache && cache.getItem(href);
-    var timestamp = cache && cache.getItem(href + ':timestamp');
-    var styles    = { css: css, timestamp: timestamp };
-    var rootpath;
-
-    if (less.relativeUrls) {
-        if (less.rootpath) {
-            if (sheet.entryPath) {
-                rootpath = extractUrlParts(less.rootpath + pathDiff(hrefParts.path, sheet.entryPath)).path;
-            } else {
-                rootpath = less.rootpath;
-            }
-        } else {
-            rootpath = hrefParts.path;
-        }
-    } else  {
-        if (less.rootpath) {
-            rootpath = less.rootpath;
-        } else {
-            if (sheet.entryPath) {
-                rootpath = sheet.entryPath;
-            } else {
-                rootpath = hrefParts.path;
-            }
-        }
-    }
-
-    xhr(href, sheet.type, function (data, lastModified) {
-        // Store data this session
-        session_cache += data.replace(/@import .+?;/ig, '');
-
-        if (!reload && styles && lastModified &&
-           (new(Date)(lastModified).valueOf() ===
-            new(Date)(styles.timestamp).valueOf())) {
-            // Use local copy
-            createCSS(styles.css, sheet);
-            callback(null, null, data, sheet, { local: true, remaining: remaining }, href);
-        } else {
-            // Use remote copy (re-parse)
-            try {
-                contents[href] = data;  // Updating top importing parser content cache
-                new(less.Parser)({
-                    optimization: less.optimization,
-                    paths: [hrefParts.path],
-                    entryPath: sheet.entryPath || hrefParts.path,
-                    mime: sheet.type,
-                    filename: href,
-                    rootpath: rootpath,
-                    relativeUrls: sheet.relativeUrls,
-                    contents: contents,    // Passing top importing parser content cache ref down.
-                    files: files,
-                    dumpLineNumbers: less.dumpLineNumbers
-                }).parse(data, function (e, root) {
-                    if (e) { return error(e, href) }
-                    try {
-                        callback(e, root, data, sheet, { local: false, lastModified: lastModified, remaining: remaining }, href);
-                        removeNode(document.getElementById('less-error-message:' + extractId(href)));
-                    } catch (e) {
-                        error(e, href);
-                    }
-                });
-            } catch (e) {
-                error(e, href);
-            }
-        }
-    }, function (status, url) {
-        throw new(Error)("Couldn't load " + url + " (" + status + ")");
-    });
-}
-
 function extractId(href) {
     return href.replace(/^[a-z]+:\/\/?[^\/]+/, '' )  // Remove protocol & domain
                .replace(/^\//,                 '' )  // Remove root /
@@ -4411,3 +4322,5 @@
     define("less", [], function () { return less; } );
 }
 })(window);
+
+}).call();