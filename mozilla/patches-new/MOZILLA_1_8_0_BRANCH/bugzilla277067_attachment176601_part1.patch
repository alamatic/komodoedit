diff

Part 1 of 2.

Split into two parts because patch.exe on Windows will crash after successfully
applying the whole patch. Windows then brings up a modal dialog asking if a
crash report should be sent to microsoft. This hangs an unattended build.

diff -U 6 -r -N layout/generic/Makefile.in layout/generic/Makefile.in
--- layout/generic/Makefile.in	Thu Feb  3 17:01:46 2005
+++ layout/generic/Makefile.in	Sun Mar  6 16:25:45 2005
@@ -96,12 +96,13 @@
 		nsILineIterator.h \
 		nsIObjectFrame.h \
 		nsIPageSequenceFrame.h \
 		nsIScrollableFrame.h \
 		nsIScrollableViewProvider.h \
 		nsIStatefulFrame.h \
+		nsObjectFrameHelper.h \
 		nsReflowType.h \
 		$(NULL)
 
 ifdef IBMBIDI
 EXPORTS		+= \
 		nsTextTransformer.h \
diff -u -r1.510.2.3 layout/generic/nsObjectFrame.cpp
--- layout/generic/nsObjectFrame.cpp	1 Oct 2005 00:03:19 -0000	1.510.2.3
+++ layout/generic/nsObjectFrame.cpp	3 Oct 2005 00:46:07 -0000
@@ -26,6 +26,8 @@
  *   Leon Sha <leon.sha@sun.com>
  *   Roland Mainz <roland.mainz@informatik.med.uni-giessen.de>
  *   Robert O'Callahan <roc+moz@cs.cmu.edu>
+ *   Simon Fraser <smfr@smfr.org>
+ *   Steven Michaud <smichaud@pobox.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either of the GNU General Public License Version 2 or later (the "GPL"),
@@ -142,6 +144,14 @@
 #include "nsPIPluginHost.h"
 #include "nsIPluginDocument.h"
 
+// For nsObjectFrameHelper::DispatchEventToPluginOwners() and friends
+#include "nsFrame.h"
+#include "nsView.h"
+#include "nsObjectFrameHelper.h"
+#ifdef NS_DEBUG
+#include "nsPrintfCString.h"
+#endif
+
 // accessibility support
 #ifdef ACCESSIBILITY
 #include "nsIAccessibilityService.h"
@@ -2074,6 +2084,118 @@
   return NS_OK;
 }
 
+static void
+DispatchEventToFrame(nsIFrame *frame, const nsAString& aEventName)
+{
+	if (!frame)
+		return;
+	nsIContent *content = frame->GetContent();
+	if (!content)
+		return;
+	nsCOMPtr<nsIDOMDocumentEvent> eventDoc =
+		do_QueryInterface(content->GetDocument());
+	nsCOMPtr<nsIDOMEventTarget> target(do_QueryInterface(content));
+	if (!eventDoc)
+		return;
+	nsCOMPtr<nsIDOMEvent> event;
+	nsresult rv = eventDoc->CreateEvent(NS_LITERAL_STRING("Events"),
+		getter_AddRefs(event));
+	if (NS_SUCCEEDED(rv)) {
+		rv = event->InitEvent(aEventName, PR_TRUE, PR_TRUE);
+		if (NS_SUCCEEDED(rv)) {
+			PRBool unused;
+			target->DispatchEvent(event, &unused);
+		}
+	}
+}
+
+// Dispatches aEventName to every nsObjectFrame object in the widget hierarchy
+// whose top node is the parent of 'widget'.  We can't use the frame or view
+// hierarchies because they don't extend past any viewports they may contain.
+static void
+DispatchViaWidgetHierarchy(nsIWidget *widget, const nsAString& aEventName)
+{
+	if (!widget)
+		return;
+	nsIWidget *widgetLocal = widget;
+	while (widgetLocal) {
+		// Dispatch to widget children and get next child before dispatching
+		// to frame -- in case the frame's handler causes widgetLocal to be
+		// deleted.
+		DispatchViaWidgetHierarchy(widgetLocal->GetFirstChild(), aEventName);
+		nsIWidget *nextSibling = widgetLocal->GetNextSibling();
+		nsFrame *frame = nsnull;
+		nsView *view = nsView::GetViewFor(widgetLocal);
+		if (view)
+			frame = NS_STATIC_CAST(nsFrame *, view->GetClientData());
+#ifdef NS_DEBUG
+		nsString name;
+		nsCString nameUTF8;
+		if (frame) {
+			frame->GetFrameName(name);
+			nameUTF8 = NS_LossyConvertUTF16toASCII(name);
+		} else {
+			nameUTF8 += (const nsACString&) nsPrintfCString("0x%.8X", (void *) widgetLocal);
+		}
+		printf("    widget frame %s\n", nameUTF8.get());
+#endif
+		nsIObjectFrame *objectFrame;
+		if (frame && NS_SUCCEEDED(frame->
+			QueryInterface(NS_GET_IID(nsIObjectFrame), (void**)&objectFrame)))
+			DispatchEventToFrame(frame, aEventName);
+		widgetLocal = nextSibling;
+	}
+	return;
+}
+
+static nsIWidget *
+GetNearestWidget(nsIView *aView)
+{
+	if (!aView)
+		return nsnull;
+	if (aView->HasWidget())
+		return aView->GetWidget();
+	nsIView *firstChild = aView->GetFirstChild();
+	if (!firstChild)
+		return nsnull;
+	// First look at all children, then all grandchildren ...
+	nsIView *child = firstChild;
+	while (child) {
+		if (child->HasWidget())
+			return child->GetWidget();
+		child = child->GetNextSibling();
+	}
+	child = firstChild;
+	while (child) {
+		nsIWidget *nearestWidget = GetNearestWidget(child->GetFirstChild());
+		if (nearestWidget)
+			return nearestWidget;
+		child = child->GetNextSibling();
+	}
+	return nsnull;
+}
+
+// Dispatches an "event" synchronously to all the nsObjectFrame objects (i.e.
+// to their nsPluginInstanceOwner objects) contained in aView.  (As for all
+// nsIDOMEvent "events", the terminology is a bit misleading -- they never
+// go through an event queue, and so always happen immediately.)  This API
+// is currently only used to resolve bug 277067 on OS X, but in principle it
+// might have other uses.
+nsresult
+nsObjectFrameHelper::DispatchEventToPluginOwners(nsIView *aView, const nsAString& aEventName)
+{
+	if (!aView)
+		return NS_ERROR_NULL_POINTER;
+	nsCOMPtr<nsIWidget> widgetNode(GetNearestWidget(aView));
+	if (!widgetNode)
+		return NS_ERROR_NOT_AVAILABLE;
+#ifdef NS_DEBUG
+	printf("nsObjectFrameHelper::FireEventInPluginOwners(), view's child frames:\n");
+#endif
+	DispatchViaWidgetHierarchy(widgetNode, aEventName);
+	return NS_OK;
+}
+
 NS_IMETHODIMP
 nsObjectFrame::HandleEvent(nsPresContext* aPresContext,
                            nsGUIEvent*     anEvent,
@@ -3805,6 +3927,19 @@
 nsresult
 nsPluginInstanceOwner::HandleEvent(nsIDOMEvent* aEvent)
 {
+#if defined(XP_MAC) || defined(XP_MACOSX)
+  // We need this to deal with bug 277067 on the Mac.  For more info see
+  // comment in nsDeckFrame::HideBox().
+  nsAutoString eventType;
+  aEvent->GetType(eventType);
+  if (eventType == NS_LITERAL_STRING("hideplugin")) {
+#ifdef NS_DEBUG
+	  printf("Bug277067: nsPluginInstanceOwner::HandleEvent(), hideplugin (this 0x%.8X)\n",
+		  (void *) this);
+#endif
+	  FixUpPluginWindow(ePluginPaintIgnore);
+  }
+#endif
   return NS_OK;
 }
 
@@ -3910,6 +4045,10 @@
     receiver->RemoveEventListener(NS_LITERAL_STRING("dragexit"), listener, PR_TRUE);
     receiver->RemoveEventListener(NS_LITERAL_STRING("dragenter"), listener, PR_TRUE);
     receiver->RemoveEventListener(NS_LITERAL_STRING("draggesture"), listener, PR_TRUE);
+
+#if defined(XP_MAC) || defined(XP_MACOSX)
+    receiver->RemoveEventListener(NS_LITERAL_STRING("hideplugin"), listener, PR_TRUE);
+#endif
   }
 
   // Unregister scroll position listener
@@ -4098,6 +4237,14 @@
     receiver->AddEventListener(NS_LITERAL_STRING("dragexit"), listener, PR_TRUE);
     receiver->AddEventListener(NS_LITERAL_STRING("dragenter"), listener, PR_TRUE);
     receiver->AddEventListener(NS_LITERAL_STRING("draggesture"), listener, PR_TRUE);
+
+#if defined(XP_MAC) || defined(XP_MACOSX)
+#ifdef NS_DEBUG
+	  printf("Bug277067: nsPluginInstanceOwner::Init(), listening for hideplugin (this 0x%.8X)\n",
+		  (void *) this);
+#endif
+    receiver->AddEventListener(NS_LITERAL_STRING("hideplugin"), listener, PR_TRUE);
+#endif
   }
   
   // Register scroll position listener
diff -U 6 -r -N layout/generic/nsObjectFrameHelper.h layout/generic/nsObjectFrameHelper.h
--- layout/generic/nsObjectFrameHelper.h	Wed Dec 31 18:00:00 1969
+++ layout/generic/nsObjectFrameHelper.h	Sun Mar  6 19:53:34 2005
@@ -0,0 +1,49 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is mozilla.org code.
+ *
+ * The Initial Developer of the Original Code is
+ * Netscape Communications Corporation.
+ * Portions created by the Initial Developer are Copyright (C) 1998
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Steven Michaud <smichaud@pobox.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either of the GNU General Public License Version 2 or later (the "GPL"),
+ * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+#ifndef nsObjectFrameHelper_h___
+#define nsObjectFrameHelper_h___
+
+#include "nsIView.h"
+#include "nsString.h"
+
+class nsObjectFrameHelper {
+public:
+	static nsresult DispatchEventToPluginOwners(nsIView *aView, const nsAString& aEventName);
+};
+
+#endif /* nsObjectFrameHelper_h___ */
