Allow plugin events to be controlled by attributes send on the plugin's embed
element.

This is required (on Windows and Linux) to stop the plugin/NPAPI from swallowing
these events and thus getting drag/drop working correctly in scintilla/scimoz.

Index: /as/komodo-devel/mozilla/build/moz1700-ko8.9/mozilla/content/base/src/nsGkAtomList.h
--- a/content/base/src/nsGkAtomList.h	Mon Sep 24 23:04:32 2012 +0200
+++ b/content/base/src/nsGkAtomList.h	Wed Nov 07 13:32:23 2012 -0800
@@ -1949,12 +1949,18 @@
 GK_ATOM(pixels,     "pixels")
 GK_ATOM(lines,      "lines")
 GK_ATOM(pages,      "pages")
 GK_ATOM(scrollbars, "scrollbars")
 GK_ATOM(other,      "other")
 
+// Komodo additions.
+GK_ATOM(allowIME, "allowIME")
+GK_ATOM(pluginAllowsFocusEvents, "pluginAllowsFocusEvents")
+GK_ATOM(pluginHandlesDomEvents, "pluginHandlesDomEvents")
+GK_ATOM(pluginHandlesDragEvents, "pluginHandlesDragEvents")
+
 #ifdef ACCESSIBILITY
 GK_ATOM(alert, "alert")
 GK_ATOM(alertdialog, "alertdialog")
 GK_ATOM(application, "application")
 GK_ATOM(anonid, "anonid")
 GK_ATOM(aria_activedescendant, "aria-activedescendant")
Index: /as/komodo-devel/mozilla/build/moz1700-ko8.9/mozilla/dom/plugins/base/nsPluginInstanceOwner.cpp
--- a/dom/plugins/base/nsPluginInstanceOwner.cpp	Mon Sep 24 23:04:32 2012 +0200
+++ b/dom/plugins/base/nsPluginInstanceOwner.cpp	Wed Nov 07 13:32:23 2012 -0800
@@ -317,12 +317,15 @@
   mPluginWindowVisible = false;
   mPluginDocumentActiveState = true;
   mNumCachedAttrs = 0;
   mNumCachedParams = 0;
   mCachedAttrParamNames = nullptr;
   mCachedAttrParamValues = nullptr;
+  mPluginAllowsFocus = true;
+  mPluginHandlesDomEvents = false;
+  mPluginHandlesDragEvents = false;
 
 #ifdef XP_MACOSX
 #ifndef NP_NO_CARBON
   mEventModel = NPEventModelCarbon;
 #else
   mEventModel = NPEventModelCocoa;
@@ -2762,44 +2765,48 @@
 #ifdef XP_MACOSX
   RemoveFromCARefreshTimer();
   if (mColorProfile)
     ::CGColorSpaceRelease(mColorProfile);  
 #endif
 
-  // unregister context menu listener
-  if (mCXMenuListener) {
-    mCXMenuListener->Destroy(mContent);
-    mCXMenuListener = nullptr;
+  if (mPluginHandlesDomEvents) {
+    // unregister context menu listener
+    if (mCXMenuListener) {
+      mCXMenuListener->Destroy(mContent);
+      mCXMenuListener = nullptr;
+    }
+  
+    mContent->RemoveEventListener(NS_LITERAL_STRING("focus"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("blur"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("mouseup"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("mousedown"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("mousemove"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("click"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("dblclick"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("mouseover"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("mouseout"), this, false);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("keypress"), this, true);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("keydown"), this, true);
+    mContent->RemoveEventListener(NS_LITERAL_STRING("keyup"), this, true);
+    if (mPluginHandlesDragEvents) {
+      mContent->RemoveEventListener(NS_LITERAL_STRING("drop"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragdrop"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("drag"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragenter"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragover"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragleave"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragexit"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragstart"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("draggesture"), this, true);
+      mContent->RemoveEventListener(NS_LITERAL_STRING("dragend"), this, true);
+    }
+#if defined(MOZ_WIDGET_QT) && (MOZ_PLATFORM_MAEMO == 6)
+    mContent->RemoveEventListener(NS_LITERAL_STRING("text"), this, true);
+#endif
   }
 
-  mContent->RemoveEventListener(NS_LITERAL_STRING("focus"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("blur"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("mouseup"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("mousedown"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("mousemove"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("click"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dblclick"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("mouseover"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("mouseout"), this, false);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("keypress"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("keydown"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("keyup"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("drop"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragdrop"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("drag"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragenter"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragover"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragleave"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragexit"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragstart"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("draggesture"), this, true);
-  mContent->RemoveEventListener(NS_LITERAL_STRING("dragend"), this, true);
-#if defined(MOZ_WIDGET_QT) && (MOZ_PLATFORM_MAEMO == 6)
-  mContent->RemoveEventListener(NS_LITERAL_STRING("text"), this, true);
-#endif
-
 #if MOZ_WIDGET_ANDROID
   RemovePluginView();
 #endif
 
   if (mWidget) {
     if (mPluginWindow) {
@@ -3232,52 +3239,73 @@
     objFrame->PresContext()->EnsureVisible();
   } else {
     NS_NOTREACHED("Should not be initializing plugin without a frame");
     return NS_ERROR_FAILURE;
   }
 
-  // register context menu listener
-  mCXMenuListener = new nsPluginDOMContextMenuListener();
-  if (mCXMenuListener) {    
-    mCXMenuListener->Init(aContent);
+  if (mContent->AttrValueIs(kNameSpaceID_None,
+                            nsGkAtoms::pluginAllowsFocusEvents,
+                            nsGkAtoms::_false,
+                            eCaseMatters)) {
+    mPluginAllowsFocus = false;
   }
 
-  mContent->AddEventListener(NS_LITERAL_STRING("focus"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("blur"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("mouseup"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("mousedown"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("mousemove"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("click"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("dblclick"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("mouseover"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("mouseout"), this, false,
-                             false);
-  mContent->AddEventListener(NS_LITERAL_STRING("keypress"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("keydown"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("keyup"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("drop"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragdrop"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("drag"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragenter"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragover"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragleave"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragexit"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragstart"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("draggesture"), this, true);
-  mContent->AddEventListener(NS_LITERAL_STRING("dragend"), this, true);
+  if (!mContent->AttrValueIs(kNameSpaceID_None,
+                             nsGkAtoms::pluginHandlesDomEvents,
+                             nsGkAtoms::_false,
+                             eCaseMatters)) {
+    mPluginHandlesDomEvents = true;
+
+    // register context menu listener
+    mCXMenuListener = new nsPluginDOMContextMenuListener();
+    if (mCXMenuListener) {    
+      mCXMenuListener->Init(aContent);
+    }
+  
+    mContent->AddEventListener(NS_LITERAL_STRING("focus"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("blur"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("mouseup"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("mousedown"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("mousemove"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("click"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("dblclick"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("mouseover"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("mouseout"), this, false,
+                               false);
+    mContent->AddEventListener(NS_LITERAL_STRING("keypress"), this, true);
+    mContent->AddEventListener(NS_LITERAL_STRING("keydown"), this, true);
+    mContent->AddEventListener(NS_LITERAL_STRING("keyup"), this, true);
+    if (!mContent->AttrValueIs(kNameSpaceID_None,
+                               nsGkAtoms::pluginHandlesDragEvents,
+                               nsGkAtoms::_false,
+                               eCaseMatters)) {
+      // Register drag listener
+      mPluginHandlesDragEvents = true;
+      mContent->AddEventListener(NS_LITERAL_STRING("drop"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragdrop"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("drag"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragenter"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragover"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragleave"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragexit"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragstart"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("draggesture"), this, true);
+      mContent->AddEventListener(NS_LITERAL_STRING("dragend"), this, true);
+    }
 #if defined(MOZ_WIDGET_QT) && (MOZ_PLATFORM_MAEMO == 6)
-  mContent->AddEventListener(NS_LITERAL_STRING("text"), this, true);
+    mContent->AddEventListener(NS_LITERAL_STRING("text"), this, true);
 #endif
+  }
 
   return NS_OK; 
 }
 
 void* nsPluginInstanceOwner::GetPluginPortFromWidget()
 {
Index: /as/komodo-devel/mozilla/build/moz1700-ko8.9/mozilla/dom/plugins/base/nsPluginInstanceOwner.h
--- a/dom/plugins/base/nsPluginInstanceOwner.h	Mon Sep 24 23:04:32 2012 +0200
+++ b/dom/plugins/base/nsPluginInstanceOwner.h	Wed Nov 07 13:32:23 2012 -0800
@@ -264,12 +264,17 @@
   void ExitFullScreen();
 
   // Called from AndroidJNI when we removed the fullscreen view.
   static void ExitFullScreen(jobject view);
 #endif
   
+  bool AllowsFocus()
+  {
+    return mPluginAllowsFocus;
+  }
+
 private:
   
   // return FALSE if LayerSurface dirty (newly created and don't have valid plugin content yet)
   bool IsUpToDate()
   {
     nsIntSize size;
@@ -324,12 +329,16 @@
   bool                        mPluginWindowVisible;
   bool                        mPluginDocumentActiveState;
 #if defined(XP_MACOSX) && !defined(NP_NO_CARBON)
   bool                        mRegisteredScrollPositionListener;
 #endif
 
+  bool                        mPluginAllowsFocus;
+  bool                        mPluginHandlesDomEvents;
+  bool                        mPluginHandlesDragEvents;
+
   uint16_t          mNumCachedAttrs;
   uint16_t          mNumCachedParams;
   char              **mCachedAttrParamNames;
   char              **mCachedAttrParamValues;
   
 #ifdef XP_MACOSX
@@ -375,7 +384,6 @@
 #endif
 
   bool mWaitingForPaint;
 };
 
 #endif // nsPluginInstanceOwner_h_
-
