diff

Allow one to use
|   <textbox type="autocomplete" sizetopopup="none" autocompletepopup="myPopup" />
and
|   <panel type="autocomplete" id="myPopup" width="300"/>
to specify that the popup's width should NOT be set to that of the
textbox. When using this, one must manually set the width on the
popup widget (set to 300 in the example above).

Currently the popup is sized to the textbox's width regardless of the
value of "sizetopopup".

The `.removeAttribute("width")` call was added for this bug:
https://bugzilla.mozilla.org/show_bug.cgi?id=381084

See: https://bugzilla.mozilla.org/show_bug.cgi?id=416250

Index: toolkit/content/widgets/autocomplete.xml
===================================================================
RCS file: /cvsroot/mozilla/toolkit/content/widgets/autocomplete.xml,v
retrieving revision 1.139
diff -U 10 -r1.139 autocomplete.xml
--- toolkit/content/widgets/autocomplete.xml	22 Apr 2008 19:47:44 -0000	1.139
+++ toolkit/content/widgets/autocomplete.xml	27 Aug 2008 23:48:52 -0000
@@ -691,27 +693,29 @@
           if (!this.mPopupOpen) {
             this.mInput = aInput;
             this.view = aInput.controller.QueryInterface(Components.interfaces.nsITreeView);
             this.invalidate();
 
             this.showCommentColumn = this.mInput.showCommentColumn;
             this.showImageColumn = this.mInput.showImageColumn;
 
             document.popupNode = null;
 
-            var rect = aElement.getBoundingClientRect();
-            var nav = aElement.ownerDocument.defaultView.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
-                              .getInterface(Components.interfaces.nsIWebNavigation);
-            var docShell = nav.QueryInterface(Components.interfaces.nsIDocShell);
-            var docViewer = docShell.contentViewer.QueryInterface(Components.interfaces.nsIMarkupDocumentViewer);
-            var width = (rect.right - rect.left) * docViewer.fullZoom;
-            this.setAttribute("width", width > 100 ? width : 100);
+            if (aElement.sizetopopup == "always" || aElement.sizetopopup == "pref") {
+              var rect = aElement.getBoundingClientRect();
+              var nav = aElement.ownerDocument.defaultView.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
+                                .getInterface(Components.interfaces.nsIWebNavigation);
+              var docShell = nav.QueryInterface(Components.interfaces.nsIDocShell);
+              var docViewer = docShell.contentViewer.QueryInterface(Components.interfaces.nsIMarkupDocumentViewer);
+              var width = (rect.right - rect.left) * docViewer.fullZoom;
+              this.setAttribute("width", width > 100 ? width : 100);
+            }
 
             // setConsumeRollupEvent() before we call openPopup()
             var nsIPopupBO = Components.interfaces.nsIPopupBoxObject;
             this.popupBoxObject.setConsumeRollupEvent(
               this.mInput.consumeRollupEvent ? 
                 nsIPopupBO.ROLLUP_CONSUME : 
                 nsIPopupBO.ROLLUP_NO_CONSUME);
             this.openPopup(aElement, "after_start", 0, 0, false, false);
           }
         ]]></body>
@@ -785,21 +789,24 @@
 
       <property name="popupOpen" readonly="true"
                 onget="return this.mPopupOpen;"/>
 
       <method name="closePopup">
         <body>
           <![CDATA[
           if (this.mPopupOpen) {
             this.hidePopup();
             document.popupNode = null;
-            this.removeAttribute("width");
+            var sizetopopup = this.mInput.getAttribute("sizetopopup");
+            if (sizetopopup == "always" || sizetopopup == "pref") {
+              this.removeAttribute("width");
+            }
           }
         ]]>
         </body>
       </method>
 
       <!-- This is the default number of rows that we give the autocomplete
            popup when the textbox doesn't have a "maxrows" attribute
            for us to use. -->
       <field name="defaultMaxRows" readonly="true">6</field>
 
@@ -940,25 +947,27 @@
 
       <method name="_openAutocompletePopup">
         <parameter name="aInput"/>
         <parameter name="aElement"/>
         <body>
           <![CDATA[
           if (!this.mPopupOpen) {
             this.mInput = aInput;
             document.popupNode = null;
 
-            var rect = aElement.getBoundingClientRect();
-            var width = rect.right - rect.left;
-            this.setAttribute("width", width > 100 ? width : 100);
-            // invalidate() depends on the width attribute
-            this._invalidate();
+            if (aElement.sizetopopup == "always" || aElement.sizetopopup == "pref") {
+              var rect = aElement.getBoundingClientRect();
+              var width = rect.right - rect.left;
+              this.setAttribute("width", width > 100 ? width : 100);
+              // invalidate() depends on the width attribute
+              this._invalidate();
+            }
 
             // setConsumeRollupEvent() before we call openPopup()
             var nsIPopupBO = Components.interfaces.nsIPopupBoxObject;
             this.popupBoxObject.setConsumeRollupEvent(
               this.mInput.consumeRollupEvent ? 
                 nsIPopupBO.ROLLUP_CONSUME : 
                 nsIPopupBO.ROLLUP_NO_CONSUME);
             this.openPopup(aElement, "after_start", 0, 0, false, false);
           }
         ]]>
