diff

Note that this is no longer exactly like attachment 176601 to moz bug 277067.
The patches to view/src/Makefile.in and view/src/nsViewManager.cpp have been
freshened to deal with these changes:

http://bonsai.mozilla.org/cvsview2.cgi?diff_mode=context&whitespace_mode=show&subdir=mozilla/view/src&command=DIFF_FRAMESET&file=Makefile.in&rev1=1.45&rev2=1.46&root=/cvsroot
http://bonsai.mozilla.org/cvsview2.cgi?diff_mode=context&whitespace_mode=show&subdir=mozilla/view/src&command=DIFF_FRAMESET&file=nsViewManager.cpp&rev1=3.422&rev2=3.423&root=/cvsroot


diff -u -r1.22 layout/generic/Makefile.in
--- layout/generic/Makefile.in	24 May 2007 02:13:04 -0000	1.22
+++ layout/generic/Makefile.in	13 Jun 2007 21:09:38 -0000
@@ -105,6 +105,7 @@
 		nsIImageFrame.h \
 		nsILineIterator.h \
 		nsIObjectFrame.h \
+                nsObjectFrameHelper.h \
 		nsIPageSequenceFrame.h \
 		nsIScrollableFrame.h \
 		nsIScrollableViewProvider.h \
diff -u -r1.595 layout/generic/nsObjectFrame.cpp
--- layout/generic/nsObjectFrame.cpp	2 Jun 2007 22:02:57 -0000	1.595
+++ layout/generic/nsObjectFrame.cpp	13 Jun 2007 21:13:46 -0000
@@ -28,6 +28,8 @@
  *   Robert O'Callahan <roc+moz@cs.cmu.edu>
  *   Christian Biesinger <cbiesinger@web.de>
  *   Josh Aas <josh@mozilla.com>
+ *   Simon Fraser <smfr@smfr.org>
+ *   Steven Michaud <smichaud@pobox.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either of the GNU General Public License Version 2 or later (the "GPL"),
@@ -122,6 +124,14 @@
 #include "nsPIPluginHost.h"
 #include "nsIPluginDocument.h"
 
+// For nsObjectFrameHelper::DispatchEventToPluginOwners() and friends
+#include "nsFrame.h"
+#include "nsView.h"
+#include "nsObjectFrameHelper.h"
+#ifdef NS_DEBUG
+#include "nsPrintfCString.h"
+#endif
+
 #ifdef MOZ_CAIRO_GFX
 #include "gfxContext.h"
 #endif
@@ -1233,6 +1243,118 @@
 #endif
 }
 
+static void
+DispatchEventToFrame(nsIFrame *frame, const nsAString& aEventName)
+{
+	if (!frame)
+		return;
+	nsIContent *content = frame->GetContent();
+	if (!content)
+		return;
+	nsCOMPtr<nsIDOMDocumentEvent> eventDoc =
+		do_QueryInterface(content->GetDocument());
+	nsCOMPtr<nsIDOMEventTarget> target(do_QueryInterface(content));
+	if (!eventDoc)
+		return;
+	nsCOMPtr<nsIDOMEvent> event;
+	nsresult rv = eventDoc->CreateEvent(NS_LITERAL_STRING("Events"),
+		getter_AddRefs(event));
+	if (NS_SUCCEEDED(rv)) {
+		rv = event->InitEvent(aEventName, PR_TRUE, PR_TRUE);
+		if (NS_SUCCEEDED(rv)) {
+			PRBool unused;
+			target->DispatchEvent(event, &unused);
+		}
+	}
+}
+
+// Dispatches aEventName to every nsObjectFrame object in the widget hierarchy
+// whose top node is the parent of 'widget'.  We can't use the frame or view
+// hierarchies because they don't extend past any viewports they may contain.
+static void
+DispatchViaWidgetHierarchy(nsIWidget *widget, const nsAString& aEventName)
+{
+	if (!widget)
+		return;
+	nsIWidget *widgetLocal = widget;
+	while (widgetLocal) {
+		// Dispatch to widget children and get next child before dispatching
+		// to frame -- in case the frame's handler causes widgetLocal to be
+		// deleted.
+		DispatchViaWidgetHierarchy(widgetLocal->GetFirstChild(), aEventName);
+		nsIWidget *nextSibling = widgetLocal->GetNextSibling();
+		nsFrame *frame = nsnull;
+		nsView *view = nsView::GetViewFor(widgetLocal);
+		if (view)
+			frame = NS_STATIC_CAST(nsFrame *, view->GetClientData());
+#ifdef NS_DEBUG
+		nsString name;
+		nsCString nameUTF8;
+		if (frame) {
+			frame->GetFrameName(name);
+			nameUTF8 = NS_LossyConvertUTF16toASCII(name);
+		} else {
+			nameUTF8 += (const nsACString&) nsPrintfCString("0x%.8X", (void *) widgetLocal);
+		}
+		printf("    widget frame %s\n", nameUTF8.get());
+#endif
+		nsIObjectFrame *objectFrame;
+		if (frame && NS_SUCCEEDED(frame->
+			QueryInterface(NS_GET_IID(nsIObjectFrame), (void**)&objectFrame)))
+			DispatchEventToFrame(frame, aEventName);
+		widgetLocal = nextSibling;
+	}
+	return;
+}
+
+static nsIWidget *
+GetNearestWidget(nsIView *aView)
+{
+	if (!aView)
+		return nsnull;
+	if (aView->HasWidget())
+		return aView->GetWidget();
+	nsIView *firstChild = aView->GetFirstChild();
+	if (!firstChild)
+		return nsnull;
+	// First look at all children, then all grandchildren ...
+	nsIView *child = firstChild;
+	while (child) {
+		if (child->HasWidget())
+			return child->GetWidget();
+		child = child->GetNextSibling();
+	}
+	child = firstChild;
+	while (child) {
+		nsIWidget *nearestWidget = GetNearestWidget(child->GetFirstChild());
+		if (nearestWidget)
+			return nearestWidget;
+		child = child->GetNextSibling();
+	}
+	return nsnull;
+}
+
+// Dispatches an "event" synchronously to all the nsObjectFrame objects (i.e.
+// to their nsPluginInstanceOwner objects) contained in aView.  (As for all
+// nsIDOMEvent "events", the terminology is a bit misleading -- they never
+// go through an event queue, and so always happen immediately.)  This API
+// is currently only used to resolve bug 277067 on OS X, but in principle it
+// might have other uses.
+nsresult
+nsObjectFrameHelper::DispatchEventToPluginOwners(nsIView *aView, const nsAString& aEventName)
+{
+	if (!aView)
+		return NS_ERROR_NULL_POINTER;
+	nsCOMPtr<nsIWidget> widgetNode(GetNearestWidget(aView));
+	if (!widgetNode)
+		return NS_ERROR_NOT_AVAILABLE;
+#ifdef NS_DEBUG
+	printf("nsObjectFrameHelper::FireEventInPluginOwners(), view's child frames:\n");
+#endif
+	DispatchViaWidgetHierarchy(widgetNode, aEventName);
+	return NS_OK;
+}
+
 NS_IMETHODIMP
 nsObjectFrame::HandleEvent(nsPresContext* aPresContext,
                            nsGUIEvent*     anEvent,
@@ -3004,6 +3126,19 @@
 nsresult
 nsPluginInstanceOwner::HandleEvent(nsIDOMEvent* aEvent)
 {
+#if defined(XP_MAC) || defined(XP_MACOSX)
+  // We need this to deal with bug 277067 on the Mac.  For more info see
+  // comment in nsDeckFrame::HideBox().
+  nsAutoString eventType;
+  aEvent->GetType(eventType);
+  if (eventType == NS_LITERAL_STRING("hideplugin")) {
+#ifdef NS_DEBUG
+	  printf("Bug277067: nsPluginInstanceOwner::HandleEvent(), hideplugin (this 0x%.8X)\n",
+		  (void *) this);
+#endif
+	  FixUpPluginWindow(ePluginPaintIgnore);
+  }
+#endif
   return NS_OK;
 }
 
@@ -3129,6 +3264,10 @@
     target->RemoveEventListener(NS_LITERAL_STRING("dragexit"), listener, PR_TRUE);
     target->RemoveEventListener(NS_LITERAL_STRING("dragenter"), listener, PR_TRUE);
     target->RemoveEventListener(NS_LITERAL_STRING("draggesture"), listener, PR_TRUE);
+
+#if defined(XP_MAC) || defined(XP_MACOSX)
+    target->RemoveEventListener(NS_LITERAL_STRING("hideplugin"), listener, PR_TRUE);
+#endif
   }
 
   // Unregister scroll position listener
@@ -3316,6 +3455,14 @@
     target->AddEventListener(NS_LITERAL_STRING("dragexit"), listener, PR_TRUE);
     target->AddEventListener(NS_LITERAL_STRING("dragenter"), listener, PR_TRUE);
     target->AddEventListener(NS_LITERAL_STRING("draggesture"), listener, PR_TRUE);
+
+#if defined(XP_MAC) || defined(XP_MACOSX)
+#ifdef NS_DEBUG
+	  printf("Bug277067: nsPluginInstanceOwner::Init(), listening for hideplugin (this 0x%.8X)\n",
+		  (void *) this);
+#endif
+    target->AddEventListener(NS_LITERAL_STRING("hideplugin"), listener, PR_TRUE);
+#endif
   }
   
   // Register scroll position listener
diff -U 6 -r -N layout/generic/nsObjectFrameHelper.h layout/generic/nsObjectFrameHelper.h
--- layout/generic/nsObjectFrameHelper.h	Wed Dec 31 18:00:00 1969
+++ layout/generic/nsObjectFrameHelper.h	Sun Mar  6 19:53:34 2005
@@ -0,0 +1,49 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is mozilla.org code.
+ *
+ * The Initial Developer of the Original Code is
+ * Netscape Communications Corporation.
+ * Portions created by the Initial Developer are Copyright (C) 1998
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Steven Michaud <smichaud@pobox.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either of the GNU General Public License Version 2 or later (the "GPL"),
+ * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+#ifndef nsObjectFrameHelper_h___
+#define nsObjectFrameHelper_h___
+
+#include "nsIView.h"
+#include "nsString.h"
+
+class nsObjectFrameHelper {
+public:
+	static nsresult DispatchEventToPluginOwners(nsIView *aView, const nsAString& aEventName);
+};
+
+#endif /* nsObjectFrameHelper_h___ */
diff -u -6 -r1.46 Makefile.in
--- view/src/Makefile.in	9 Feb 2006 01:24:27 -0000	1.46
+++ view/src/Makefile.in	21 Feb 2006 18:09:10 -0000
@@ -52,20 +52,23 @@
 REQUIRES	= xpcom \
 		  string \
 		  gfx \
 		  widget \
 		  dom \
 		  pref \
+		  layout \
 		  $(NULL)
 
 ifdef MOZ_ENABLE_CAIRO_GFX
 REQUIRES += thebes cairo
 endif
 
 EXTRA_DSO_LIBS = gkgfx
 
+EXPORTS		= nsView.h
+
 CPPSRCS		= \
 		nsView.cpp \
 		nsScrollPortView.cpp \
 		nsViewManager.cpp \
 		$(NULL)
 
diff -u -r3.451 view/src/nsViewManager.cpp
--- view/src/nsViewManager.cpp	28 May 2007 03:17:20 -0000	3.451
+++ view/src/nsViewManager.cpp	13 Jun 2007 21:15:50 -0000
@@ -24,6 +24,7 @@
  *   Kevin McCluskey  <kmcclusk@netscape.com>
  *   Robert O'Callahan <roc+@cs.cmu.edu>
  *   Roland Mainz <roland.mainz@informatik.med.uni-giessen.de>
+ *   Steven Michaud <smichaud@pobox.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either of the GNU General Public License Version 2 or later (the "GPL"),
@@ -66,6 +67,10 @@
 
 #include "gfxContext.h"
 
+#if defined(XP_MAC) || defined(XP_MACOSX)
+#include "nsObjectFrameHelper.h"
+#endif
+
 static NS_DEFINE_IID(kBlenderCID, NS_BLENDER_CID);
 static NS_DEFINE_IID(kRegionCID, NS_REGION_CID);
 static NS_DEFINE_IID(kRenderingContextCID, NS_RENDERING_CONTEXT_CID);
@@ -1691,6 +1696,26 @@
         childView->SetVisibility(aVisible);
       }
     }
+
+#if defined(XP_MAC) || defined(XP_MACOSX)
+	// nsDeckFrame::IndexChanged() correctly calls nsDeckFrame::HideBox() on
+	// the "old" box before calling nsDeckFrame::ShowBox() on the "new" one.
+	// But on the Mac the "new" box gets shown synchronously, while the "old"
+	// one only gets hidden asynchronously (when nsPluginInstanceOwner::Notify()
+	// is called on a timer and calls FixUpPluginWindow()) -- which means that,
+	// unless we do something, the order will often be reversed, causing plugin
+	// ghosts to show up in the "wrong" tab when switching tabs.  This problem
+	// is bug 277067.  The call to DispatchEventToPluginOwners() is being made
+	// here (rather than in nsDeckFrame.cpp) so that a "hideplugin" message
+	// will be sent whenever an nsObjectFrame object is hidden (i.e. whenever
+	// nsViewManager::SetViewVisibility() is called with aVisible ==
+	// nsViewVisibility_kHide).
+	if (aVisible == nsViewVisibility_kHide) {
+		nsCOMPtr<nsIViewManager> kungFuDeathGrip(this);
+		nsObjectFrameHelper::DispatchEventToPluginOwners(view, NS_LITERAL_STRING("hideplugin"));
+	}
+#endif
+
   }
   return NS_OK;
 }
