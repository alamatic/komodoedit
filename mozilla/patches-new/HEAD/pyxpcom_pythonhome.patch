diff

Patch to pyloader to have it look for and use a siloed Python at ../../python
relative to the components dir. "Use" means setting PYTHONHOME. This is only
necessary on Windows and Linux (Mac OS X framework handling is different).


Index: extensions/python/xpcom/src/dllmain.cpp
===================================================================
RCS file: /cvsroot/mozilla/extensions/python/xpcom/src/dllmain.cpp,v
retrieving revision 1.19
diff -u -r1.19 extensions/python/xpcom/src/dllmain.cpp
--- extensions/python/xpcom/src/dllmain.cpp	5 Oct 2006 10:44:03 -0000	1.19
+++ extensions/python/xpcom/src/dllmain.cpp	14 Jun 2007 00:19:05 -0000
@@ -96,6 +96,58 @@
 	PR_Unlock(g_lockMain);
 }
 
+
+/* Set PYTHONHOME to '../../python' dir relative to the pyloader location
+ * (if it exists).
+ */
+void SetPythonHome(nsIFile* loaderLocation) {
+    nsresult rv;
+
+    /* Look for siloed Python in ../../python relative to the pyloader.so|dll
+     * dir (i.e. the components dir).
+     */
+    nsCOMPtr<nsIFile> componentsDir;
+    rv = loaderLocation->GetParent(getter_AddRefs(componentsDir));
+    if (NS_FAILED(rv)) {
+        PyXPCOM_LogError("pyloader: Couldn't get pyloader parent dir!\n");
+        return;
+    }
+    nsCOMPtr<nsIFile> binDir;
+    rv = componentsDir->GetParent(getter_AddRefs(binDir));
+    if (NS_FAILED(rv)) {
+        PyXPCOM_LogError("pyloader: Couldn't get components parent dir!\n");
+        return;
+    }
+    nsCOMPtr<nsIFile> distDir;
+    rv = binDir->GetParent(getter_AddRefs(distDir));
+    if (NS_FAILED(rv)) {
+        PyXPCOM_LogError("pyloader: Couldn't get bin parent dir!\n");
+        return;
+    }
+    nsCOMPtr<nsILocalFile> pythonHome = do_QueryInterface(distDir);
+    rv = pythonHome->AppendRelativePath(NS_LITERAL_STRING("python"));
+    if (NS_FAILED(rv)) {
+        PyXPCOM_LogError("pyloader: Couldn't build python home dir!\n");
+        return;
+    }
+
+    PRBool exists;
+    rv = pythonHome->Exists(&exists);
+    if (NS_FAILED(rv) || !exists) return;
+
+    nsCAutoString cstr;
+    pythonHome->GetNativePath(cstr);
+    char *expr = PR_smprintf("PYTHONHOME=%s", cstr.get());
+    if (expr) {
+#ifdef DEBUG
+        PyXPCOM_LogDebug("pyloader: %s\n", expr);
+#endif
+        PR_SetEnv(expr);
+    } else {
+        PyXPCOM_LogError("pyloader: Couldn't set PYTHONHOME!\n");
+    }
+}
+
 // Ensure that any paths guaranteed by this package exist on sys.path
 // Only called once as we are first loaded into the process.
 void AddStandardPaths()
@@ -184,6 +236,10 @@
 	PRBool bDidInitPython = !Py_IsInitialized(); // well, I will next line, anyway :-)
 	if (bDidInitPython) {
 		NS_TIMELINE_START_TIMER("PyXPCOM: Python initializing");
+#if defined(XP_WIN) || defined(XP_UNIX)
+	// XXXXX!!!!!  this is all different now
+                //SetPythonHome(location);
+#endif
 		Py_Initialize(); // NOTE: We never finalize Python!!
 #ifndef NS_DEBUG
 		Py_OptimizeFlag = 1;
