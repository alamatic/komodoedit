# HG changeset patch
# Parent b861ffd294913e326bdec389d27323b9f61d6539
importing patch plugin.patch

diff --git a/layout/generic/nsObjectFrame.cpp b/layout/generic/nsObjectFrame.cpp
--- a/layout/generic/nsObjectFrame.cpp
+++ b/layout/generic/nsObjectFrame.cpp
@@ -489,6 +489,11 @@ public:
              mPluginWindow->type == NPWindowTypeDrawable));
   }
 
+  PRBool AllowsFocus()
+  {
+    return mPluginAllowsFocus;
+  }
+
 private:
 
   // return FALSE if LayerSurface dirty (newly created and don't have valid plugin content yet)
@@ -564,6 +569,9 @@ private:
   // If true, destroy the widget on destruction. Used when plugin stop
   // is being delayed to a safer point in time.
   PRPackedBool                mDestroyWidget;
+  PRPackedBool                mPluginAllowsFocus;
+  PRPackedBool                mPluginHandlesDomEvents;
+  PRPackedBool                mPluginHandlesDragEvents;
   PRUint16          mNumCachedAttrs;
   PRUint16          mNumCachedParams;
   char              **mCachedAttrParamNames;
@@ -949,8 +957,9 @@ nsObjectFrame::CreateWidget(nscoord aWid
   return (needsWidget && !canCreateWidget) ? NS_ERROR_NOT_AVAILABLE : NS_OK;
 }
 
-#define EMBED_DEF_WIDTH 240
-#define EMBED_DEF_HEIGHT 200
+// XXX ActiveState
+#define EMBED_DEF_WIDTH 20
+#define EMBED_DEF_HEIGHT 20
 
 /* virtual */ nscoord
 nsObjectFrame::GetMinWidth(nsIRenderingContext *aRenderingContext)
@@ -1248,6 +1257,9 @@ nsObjectFrame::CallSetWindow(PRBool aChe
 PRBool
 nsObjectFrame::IsFocusable(PRInt32 *aTabIndex, PRBool aWithMouse)
 {
+  if (mInstanceOwner && !mInstanceOwner->AllowsFocus()) {
+    return PR_FALSE;
+  }
   if (aTabIndex)
     *aTabIndex = -1;
   return nsObjectFrameSuper::IsFocusable(aTabIndex, aWithMouse);
@@ -3157,6 +3169,9 @@ nsPluginInstanceOwner::nsPluginInstanceO
   mCachedAttrParamNames = nsnull;
   mCachedAttrParamValues = nsnull;
   mDestroyWidget = PR_FALSE;
+  mPluginAllowsFocus = PR_TRUE;
+  mPluginHandlesDomEvents = PR_FALSE;
+  mPluginHandlesDragEvents = PR_FALSE;
 
 #ifdef MOZ_COMPOSITED_PLUGINS
   mLastPoint = nsIntPoint(0,0);
@@ -5342,8 +5357,15 @@ nsEventStatus nsPluginInstanceOwner::Pro
       !(anEvent.eventStructType == NS_MOUSE_EVENT &&
         anEvent.message == NS_MOUSE_BUTTON_DOWN &&
         static_cast<const nsMouseEvent&>(anEvent).button == nsMouseEvent::eLeftButton &&
-        !mContentFocused))
+        !mContentFocused)) {
     rv = nsEventStatus_eConsumeNoDefault;
+  } else {
+    /* KOMODO: For the Mac, we want the plugin to determine what happens to
+               this event, whether this event is consumed or not
+     */
+    rv = (response == kNPEventNotHandled) ? nsEventStatus_eIgnore :
+                                            nsEventStatus_eConsumeNoDefault;
+  }
 
   pluginWidget->EndDrawPlugin();
 #endif

