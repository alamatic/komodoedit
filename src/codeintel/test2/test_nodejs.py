#!/usr/bin/env python
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is Komodo code.
# 
# The Initial Developer of the Original Code is ActiveState Software Inc.
# Portions created by ActiveState Software Inc are Copyright (C) 2000-2011
# ActiveState Software Inc. All Rights Reserved.
# 
# Contributor(s):
#   ActiveState Software Inc
# 
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
# 
# ***** END LICENSE BLOCK *****

"""Test some Node.js-specific codeintel handling."""

import os
import sys
import re
from os.path import join, dirname, abspath, exists, basename
from glob import glob
import unittest
import subprocess
import logging

from codeintel2.common import *
from codeintel2.util import indent, dedent, banner, markup_text, unmark_text
from codeintel2.environment import SimplePrefsEnvironment

from testlib import TestError, TestSkipped, TestFailed, tag
from citestsupport import CodeIntelTestCase, run, writefile



log = logging.getLogger("test")

class CplnTestCase(CodeIntelTestCase):
    lang = "Node.js"
    test_dir = join(os.getcwd(), "tmp")

    def _write_files(self, manifest={}, name="unnamed", completions=None):
        """
        Wrapper to write out the files for testing
        @param hash of file name to text content
            The file "test.js" will be run through unmark_text
        @param name the name of the test
        @return tuple (buf, positions)
            buf is a buffer of the resulting test.js
            positions is the positions returned from unmark_text
        """
        assert len(manifest) > 0, "No manifest"
        assert "test.js" in manifest, "No test.js to run"
        test_dir = join(self.test_dir, "test_nodejs_%s" % name)
        test_js = None
        for name, content in manifest.items():
            content = dedent(content)
            path = join(test_dir, name)
            if name == "test.js":
                content, positions = unmark_text(content)
                test_js = path
            writefile(path, content)
        buf = self.mgr.buf_from_path(test_js, lang="Node.js", encoding="utf-8")
        return (buf, positions)

    @tag("nodejs")
    def test_nodejs_require(self):
        manifest = {
            "http.js": """
                /* as generated by node_html_to_js.py */
                var http_ = {};
                http_.Server = function Server() {}
                http_.Server.prototype = {}
                /**
                 * Start a UNIX socket server listening for connections on the given path.
                 */
                http_.Server.prototype.listen = function() {}
                exports = http_;
                """,
            "fs.js": """
                /* possible alternative for manually written files */
                exports = {
                    rename: function() {}
                }
            """,
            "test.js": """
                var http = require('http');
                var fs = require('fs');
                http.<1>;
                fs.<2>;
                """,
        }
        buf, positions = self._write_files(manifest=manifest, name="require")
        self.assertCompletionsInclude2(buf, positions[1],
            [("class", "Server"), ])
        self.assertCompletionsInclude2(buf, positions[2],
            [("function", "rename"), ])

    @tag("nodejs")
    def test_nodejs_require_nonvar(self):
        """
        Test require() without intermediate assignment
        """
        manifest = {
            "test.js": """
                require('dummy').<1>;
                """,
            "dummy.js": """
                exports = {
                    method: function() {}
                };
                """
        }
        buf, positions = self._write_files(manifest=manifest, name="require_nonvar")
        self.assertCompletionsInclude2(buf, positions[1],
            [("function", "method"), ])

    @tag("nodejs", "knownfailure")
    def test_nodejs_globals(self):
        """
        Test that the documented globals are available
        """
        manifest = {
            "test.js": """
                require.<1>;
                """,
        }
        buf, positions = self._write_files(manifest=manifest, name="globals")
        self.assertCompletionsInclude2(buf, positions[1],
            [("function", "resolve"),
             ("array", "paths"),
            ])

    @tag("nodejs")
    def test_nodejs_timers(self):
        """
        Test the Node.js timers module
        """
        manifest = {"test.js": "require('timers').<1>;"}
        buf, positions = self._write_files(manifest=manifest, name="timers")
        self.assertCompletionsInclude2(buf, positions[1],
            [("function", "setTimeout"),
             ("function", "clearTimeout"),
             ("function", "setInterval"),
             ("function", "clearInterval"),
            ])

    @tag("nodejs")
    def test_nodejs_util(self):
        """
        Test the Node.js util module
        """
        manifest = {"test.js": "require('util').<1>;"}
        buf, positions = self._write_files(manifest=manifest, name="util")
        self.assertCompletionsInclude2(buf, positions[1],
            [("function", "debug"),
             ("function", "log"),
             ("function", "inspect"),
             ("function", "pump"),
             ("function", "inherits"),
            ])

    @tag("nodejs")
    def test_nodejs_events(self):
        """
        Test the Node.js events module
        """
        manifest = {"test.js": """
            var events = require('events');
            events.<1>;
            var emitter = new events.EventEmitter();
            emitter.<2>;
            """}
        buf, positions = self._write_files(manifest=manifest, name="events")
        self.assertCompletionsInclude2(buf, positions[1],
            [("class", "EventEmitter")])
        self.assertCompletionsInclude2(buf, positions[2],
            [("function", "addListener"),
             ("function", "on"),
             ("function", "once"),
             ("function", "removeListener"),
             ("function", "removeAllListeners"),
             ("function", "setMaxListeners"),
             ("function", "listeners"),
             ("function", "emit"),
            ])

    @tag("nodejs")
    def test_nodejs_buffer(self):
        """
        Test the Node.js buffer module
        """
        manifest = {"test.js": """
            var buffer = require('buffer');
            buffer.<1>;
            buffer.Buffer.<2>;
            var buf = new buffer.Buffer();
            buf.<3>;
            """}
        buf, positions = self._write_files(manifest=manifest, name="buffer")
        self.assertCompletionsInclude2(buf, positions[1],
            [("class", "Buffer")])
        self.assertCompletionsInclude2(buf, positions[2],
            [("function", "isBuffer"),
             ("function", "byteLength"),
            ])
        self.assertCompletionsInclude2(buf, positions[3],
            [("function", "write"),
             ("function", "toString"),
             # can't test array accessor []
             ("variable", "length"),
             ("function", "copy"),
             ("function", "slice"),
            ])

    @tag("nodejs")
    def test_nodejs_crypto(self):
        """
        Test the Node.js crypto module
        """
        manifest = {"test.js": """
            var crypto = require('crypto');
            crypto.<1>;
            crypto.createHash("md5").<2>;
            crypto.createHmac("md5", null).<3>;
            crypto.createCipher("aes192", null).<4>;
            crypto.createDecipher("aes192", null).<5>;
            crypto.createSign("RSA-SHA256").<6>;
            crypto.createVerify("RSA-SHA256").<7>;
            """}
        buf, positions = self._write_files(manifest=manifest, name="crypto")
        self.assertCompletionsInclude2(buf, positions[1],
            [("function", "createCredentials"),
             ("function", "createHash"),
             ("function", "createHmac"),
             ("function", "createCipher"),
             ("function", "createDecipher"),
            ])
        self.assertCompletionsInclude2(buf, positions[2],
            [("function", "update"),
             ("function", "digest"),
            ])
        self.assertCompletionsInclude2(buf, positions[3],
            [("function", "update"),
             ("function", "digest"),
            ])
        self.assertCompletionsInclude2(buf, positions[4],
            [("function", "update"),
             ("function", "final"),
            ])
        self.assertCompletionsInclude2(buf, positions[5],
            [("function", "update"),
             ("function", "final"),
            ])
        self.assertCompletionsInclude2(buf, positions[6],
            [("function", "update"),
             ("function", "sign"),
            ])
        self.assertCompletionsInclude2(buf, positions[7],
            [("function", "update"),
             ("function", "verify"),
            ])

    @tag("nodejs")
    def test_nodejs_tls(self):
        """
        Test the Node.js tls module
        """
        manifest = {"test.js": """
            require('tls').<1>;
            require('tls').createServer({}, function(s){}).<2>;
            """}
        buf, positions = self._write_files(manifest=manifest, name="tls")
        self.assertCompletionsInclude2(buf, positions[1],
            [("function", "connect"),
             ("function", "createServer"),
            ])
        self.assertCompletionsInclude2(buf, positions[2],
            [("function", "listen"),
             ("function", "close"),
             ("variable", "maxConnections"),
             ("variable", "connections"),
            ])

    @tag("nodejs")
    def test_nodejs_fs(self):
        """
        Test the Node.js fs module
        """
        manifest = {"test.js": """
            require('fs').<1>;
            require('fs').statSync("/tmp").<2>;
            require('fs').createReadStream("/tmp/foofoo").<3>;
            require('fs').createWriteStream("/tmp/foofoo").<4>;
            """}
        buf, positions = self._write_files(manifest=manifest, name="fs")
        self.assertCompletionsInclude2(buf, positions[1],
            [("function", "rename"),
             ("function", "renameSync"),
             ("function", "truncate"),
             ("function", "truncateSync"),
             ("function", "chmod"),
             ("function", "chmodSync"),
             ("function", "stat"),
             ("function", "lstat"),
             ("function", "fstat"),
             ("function", "statSync"),
             ("function", "lstatSync"),
             ("function", "fstatSync"),
             ("function", "link"),
             ("function", "linkSync"),
             ("function", "symlink"),
             ("function", "symlinkSync"),
             ("function", "readlink"),
             ("function", "readlinkSync"),
             ("function", "realpath"),
             ("function", "realpathSync"),
             ("function", "unlink"),
             ("function", "unlinkSync"),
             ("function", "rmdir"),
             ("function", "rmdirSync"),
             ("function", "mkdir"),
             ("function", "mkdirSync"),
             ("function", "readdir"),
             ("function", "readdirSync"),
             ("function", "close"),
             ("function", "closeSync"),
             ("function", "open"),
             ("function", "openSync"),
             ("function", "write"),
             ("function", "writeSync"),
             ("function", "read"),
             ("function", "readSync"),
             ("function", "readFile"),
             ("function", "readFileSync"),
             ("function", "writeFile"),
             ("function", "writeFileSync"),
             ("function", "watchFile"),
             ("function", "unwatchFile"),
             ("function", "createReadStream"),
             ("function", "createWriteStream"),
            ])
        self.assertCompletionsInclude2(buf, positions[2],
            [("function", "isFile"),
             ("function", "isDirectory"),
             ("function", "isBlockDevice"),
             ("function", "isCharacterDevice"),
             ("function", "isSymbolicLink"),
             ("function", "isFIFO"),
             ("function", "isSocket"),
            ])
        self.assertCompletionsInclude2(buf, positions[3],
            # this is actually from the 'streams' module, which is untestable
            [("function", "addListener"), # from EventEmitter
             ("function", "on"),          # from EventEmitter
             ("variable", "readable"),
             ("function", "setEncoding"),
             ("function", "pause"),
             ("function", "resume"),
             ("function", "destroy"),
             ("function", "destroySoon"),
             ("function", "pipe"),
            ])
        self.assertCompletionsInclude2(buf, positions[4],
            # this is actually from the 'streams' module, which is untestable
            [("function", "addListener"), # from EventEmitter
             ("function", "on"),          # from EventEmitter
             ("variable", "writable"),
             ("function", "write"),
             ("function", "end"),
             ("function", "destroy"),
            ])

    @tag("nodejs")
    def test_nodejs_path(self):
        """
        Test the Node.js path module
        """
        manifest = {"test.js": """
            path = require('path');
            path.<1>;
            """}
        buf, positions = self._write_files(manifest=manifest, name="path")
        self.assertCompletionsInclude2(buf, positions[1],
            [("function", "normalize"),
             ("function", "join"),
             ("function", "resolve"),
             ("function", "dirname"),
             ("function", "basename"),
             ("function", "extname"),
             ("function", "exists"),
             ("function", "existsSync"),
            ])

#---- mainline

if __name__ == "__main__":
    unittest.main()
