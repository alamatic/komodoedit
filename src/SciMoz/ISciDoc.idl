/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[scriptable, uuid(681a24e8-7361-4e5c-a342-77806ef98d30)]
interface ISciDoc : nsISupports {
    attribute long docPointer;

    attribute long stylingBits;
    attribute long stylingBitsMask;

    attribute long eolMode;
    /// Can also be SC_CP_UTF8 to enable UTF-8 mode
    attribute long dbcsCodePage;
    attribute long tabInChars;
    attribute long indentInChars;
    attribute long actualIndentInChars;
    attribute boolean useTabs;
    attribute boolean tabIndents;
    attribute boolean backspaceUnindents;

    /*
    DecorationList decorations;
    */

    long LineFromPosition(in long pos);
    long ClampPositionIntoDocument(in long pos);
    boolean IsCrLf(in long pos);
    long LenChar(in long pos);
    long MovePositionOutsideChar(in long pos, in long moveDir, in boolean checkLineEnd);

    // ACTIVESTATE    
    long GetBytePositionForCharOffset(in long bytePos, in long charOffset, in boolean checkLineEnd);
    attribute wstring text;
    
    // Gateways to modifying document
    void ModifiedAt(in long pos);
    boolean DeleteChars(in long pos, in long len);
    boolean InsertString(in long position, in wstring s);
    long Undo();
    long Redo();
    boolean CanUndo();
    boolean CanRedo();
    void DeleteUndoHistory();
    boolean SetUndoCollection(in boolean collectUndo);
    boolean IsCollectingUndo();
    void BeginUndoAction();
    void EndUndoAction();
    void SetSavePoint();
    boolean IsSavePoint();

    long GetLineIndentation(in long line);
    void SetLineIndentation(in long line, in long indent);
    long GetLineIndentPosition(in long line);
    long GetColumn(in long position);
    long FindColumn(in long line, in long column);
    void Indent(in boolean forwards, in long lineBottom, in long lineTop);
    /*void Indent(in boolean forwards);*/
    wstring TransformLineEnds(in wstring s, in long eolMode);
    void ConvertLineEnds(in long eolModeSet);
    void SetReadOnly(in boolean set);
    boolean IsReadOnly();

    boolean InsertChar(in long pos, in wchar ch);
    /* InsertString handles this fine:
      boolean InsertCString(in long position, in wstring s); */
    void ChangeChar(in long pos, in wchar ch);
    void DelChar(in long pos);
    void DelCharBack(in long pos);

    wchar CharAt(in long position);
    wstring GetCharRange(in long position, in long lengthRetrieve);
    wchar StyleAt(in long position);
    long GetMark(in long line);
    long AddMark(in long line, in long markerNum);
    void AddMarkSet(in long line, in long valueSet);
    void DeleteMark(in long line, in long markerNum);
    void DeleteMarkFromHandle(in long markerHandle);
    void DeleteAllMarks(in long markerNum);
    long LineFromHandle(in long markerHandle);
    long LineStart(in long line);
    long LineEnd(in long line);
    long LineEndPosition(in long position);
    long VCHomePosition(in long position);

    long SetLevel(in long line, in long level);
    long GetLevel(in long line);
    void ClearLevels();
    long GetLastChild(in long lineParent, in long level);
    long GetFoldParent(in long line);

    long ExtendWordSelect(in long pos, in long delta, in boolean onlyWordCharacters);
    long NextWordStart(in long pos, in long delta);
    long NextWordEnd(in long pos, in long delta);
    long Length();
    void Allocate(in long newSize);
    long FindText(in long minPos, in long maxPos, in wstring s,
                  in boolean caseSensitive, in boolean word, in boolean wordStart,
                  in boolean regExp, in boolean posix);
    wstring SubstituteByPosition(in wstring text);
    long LinesTotal();

    void ChangeCase(in long start, in long end, in boolean makeUpperCase);

    void SetDefaultCharClasses(in boolean includeWordClass);
    /* void SetCharClasses(in wstring chars, CharClassify::cc newCharClass); */
    /* void SetStylingBits(in long bits); */
    void StartStyling(in long position, in wchar mask);
    boolean SetStyleFor(in long length, in wchar style);
    boolean SetStyles(in long length, in string styles);
    long GetEndStyled();
    void EnsureStyledTo(in long pos);
    long GetStyleClock();
    void IncrementStyleClock();
    void DecorationFillRange(in long position, in long value, in long fillLength);

    long SetLineState(in long line, in long state);
    long GetLineState(in long line);
    long GetMaxLineState();

/*
    boolean AddWatcher(DocWatcher *watcher, void *userData);
    boolean RemoveWatcher(DocWatcher *watcher, void *userData);
    const WatcherWithUserData *GetWatchers() const { return watchers; }
    long GetLenWatchers() const { return lenWatchers; }
*/

    boolean IsWordPartSeparator(in wchar ch);
    long WordPartLeft(in long pos);
    long WordPartRight(in long pos);
    long ExtendStyleRange(in long pos, in long delta, in boolean singleLine);
    boolean IsWhiteLine(in long line);
    long ParaUp(in long pos);
    long ParaDown(in long pos);
    long IndentSize();
    long BraceMatch(in long position, in long maxReStyle);
    
};