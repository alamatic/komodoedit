/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[scriptable, uuid(681a24e8-7361-4e5c-a342-77806ef98d30)]
interface ISciDoc : nsISupports {
    attribute long docPointer;

    attribute  stylingBits;
    attribute  stylingBitsMask;

    attribute  eolMode;
    /// Can also be SC_CP_UTF8 to enable UTF-8 mode
    attribute  dbcsCodePage;
    attribute  tabInChars;
    attribute  indentInChars;
    attribute  actualIndentInChars;
    attribute boolean useTabs;
    attribute boolean tabIndents;
    attribute boolean backspaceUnindents;

    /*
    DecorationList decorations;
    */

     LineFromPosition(in  pos);
     ClampPositionIntoDocument(in  pos);
    boolean IsCrLf(in  pos);
     LenChar(in  pos);
     MovePositionOutsideChar(in  pos, in  moveDir, in boolean checkLineEnd);

    // ACTIVESTATE    
     GetBytePositionForCharOffset(in  bytePos, in  charOffset, in boolean checkLineEnd);
    attribute wstring text;
    
    // Gateways to modifying document
    void ModifiedAt(in  pos);
    boolean DeleteChars(in  pos, in  len);
    boolean InsertString(in  position, in wstring s);
     Undo();
     Redo();
    boolean CanUndo();
    boolean CanRedo();
    void DeleteUndoHistory();
    boolean SetUndoCollection(in boolean collectUndo);
    boolean IsCollectingUndo();
    void BeginUndoAction();
    void EndUndoAction();
    void SetSavePoint();
    boolean IsSavePoint();

     GetLineIndentation(in  line);
    void SetLineIndentation(in  line, in  indent);
     GetLineIndentPosition(in  line);
     GetColumn(in  position);
     FindColumn(in  line, in  column);
    void Indent(in boolean forwards, in  lineBottom, in  lineTop);
    /*void Indent(in boolean forwards);*/
    wstring TransformLineEnds(in wstring s, in  eolMode);
    void ConvertLineEnds(in  eolModeSet);
    void SetReadOnly(in boolean set);
    boolean IsReadOnly();

    boolean InsertChar(in  pos, in wchar ch);
    /* InsertString handles this fine:
      boolean InsertCString(in  position, in wstring s); */
    void ChangeChar(in  pos, in wchar ch);
    void DelChar(in  pos);
    void DelCharBack(in  pos);

    wchar CharAt(in  position);
    wstring GetCharRange(in  position, in  lengthRetrieve);
    wchar StyleAt(in  position);
     GetMark(in  line);
     AddMark(in  line, in  markerNum);
    void AddMarkSet(in  line, in  valueSet);
    void DeleteMark(in  line, in  markerNum);
    void DeleteMarkFromHandle(in  markerHandle);
    void DeleteAllMarks(in  markerNum);
     LineFromHandle(in  markerHandle);
     LineStart(in  line);
     LineEnd(in  line);
     LineEndPosition(in  position);
     VCHomePosition(in  position);

     SetLevel(in  line, in  level);
     GetLevel(in  line);
    void ClearLevels();
     GetLastChild(in  lineParent, in  level);
     GetFoldParent(in  line);

     ExtendWordSelect(in  pos, in  delta, in boolean onlyWordCharacters);
     NextWordStart(in  pos, in  delta);
     NextWordEnd(in  pos, in  delta);
     Length();
    void Allocate(in  newSize);
    long FindText(in  minPos, in  maxPos, in wstring s,
                  in boolean caseSensitive, in boolean word, in boolean wordStart,
                  in boolean regExp, in boolean posix);
    wstring SubstituteByPosition(in wstring text);
     LinesTotal();

    void ChangeCase(in  start, in  end, in boolean makeUpperCase);

    void SetDefaultCharClasses(in boolean includeWordClass);
    /* void SetCharClasses(in wstring chars, CharClassify::cc newCharClass); */
    /* void SetStylingBits(in  bits); */
    void StartStyling(in  position, in wchar mask);
    boolean SetStyleFor(in  length, in wchar style);
    boolean SetStyles(in  length, in string styles);
     GetEndStyled();
    void EnsureStyledTo(in  pos);
     GetStyleClock();
    void IncrementStyleClock();
    void DecorationFillRange(in  position, in  value, in  fillLength);

     SetLineState(in  line, in  state);
     GetLineState(in  line);
     GetMaxLineState();

/*
    boolean AddWatcher(DocWatcher *watcher, void *userData);
    boolean RemoveWatcher(DocWatcher *watcher, void *userData);
    const WatcherWithUserData *GetWatchers() const { return watchers; }
     GetLenWatchers() const { return lenWatchers; }
*/

    boolean IsWordPartSeparator(in wchar ch);
     WordPartLeft(in  pos);
     WordPartRight(in  pos);
     ExtendStyleRange(in  pos, in  delta, in boolean singleLine);
    boolean IsWhiteLine(in  line);
     ParaUp(in  pos);
     ParaDown(in  pos);
     IndentSize();
     BraceMatch(in  position, in  maxReStyle);
    
};