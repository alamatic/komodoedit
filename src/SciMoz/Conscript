#!/usr/local/bin/perl
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is Komodo code.
# 
# The Initial Developer of the Original Code is ActiveState Software Inc.
# Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
# ActiveState Software Inc. All Rights Reserved.
# 
# Contributor(s):
#   ActiveState Software Inc
# 
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
# 
# ***** END LICENSE BLOCK *****

# Conscript for building the scintilla dll (with lexer)
#   Neil Hodgson provides a makefile to build this but it duplicates
#   some stuff that is better done with Komodo's Cons built system. The
#   makefile is pretty simple anyway so it is replaced by a direct
#   Cons build system. This will have to be kept in sync.
#
#   NOTE: This *should* have been a joke in Cons, but it does not
#     know anythings about resource compilation on Windows, so have
#     to do it manually. I still don't want to just call Neil's
#     makefile because it hardcodes paths.
#

Import(
    'cons',
    'platform',
    'build',
    'buildType',
    'ranRegxpcomStateFileName',
    'mozComponentsDir',
    'mozLibPath',
    'mozBin',
    'mozIncludePath',
    'mozIdlIncludePath',
    'mozPluginsDir',
    'mozSrc',
    'mozObjDir',
    'mozDist',
    'mozDevelDist',
    'scintillaBuildDir',
    'idlExportDir',
    'unsiloedPythonExe',
    'build',
    'mozVersionNumber',
    'architecture',
    'productType',
    'buildFlavour',
    'mozVersion',
    'sdkDir',
    'universal',
    'compiler',
);

if ($^O eq "linux") {
    Import(
        "linuxDistro",
    );
}

# Autogenerate C++ interface functions and IDL interface stubs from
# Scintilla.iface. The IDL stubs are patched into ISciMoz.template.idl to
# make ISciMoz.idl.
#
# We use preprocessing to support building SciMoz for both 32-bit
# and 64-bit architecutres (due to having a different pointer size).
# The Scintilla.iface *must* be patched before the XPFacer is used,
# to ensure the Scintilla definitions are aware of pointer references,
# this is done in the "iface_64bit.patch" file in the patches directory.
my %ppData = (
    'ARCHITECTURE' => "$architecture",
);
$cons->Preprocess('XPFacer.p.py', 'XPFacer.py', \%ppData);
$cons->Command(
    "npscimoz_gen.h",
    # files needed to do the generation
    "XPFacer.py",
    "../scintilla/include/Scintilla.iface",
    "../scintilla/include/Face.py",
    qq(
        $unsiloedPythonExe bin/run-in-dir.py %1:d $unsiloedPythonExe %1:f
    )
);
$cons->Command(
    "ISciMoz.idl",
    "ISciMoz.template.idl",
    # files needed to do the generation and patching
    "XPFacer.py",
    "../scintilla/include/Scintilla.iface",
    "../scintilla/include/Face.py",
    "#util/patch-template.py",
    qq(
        $unsiloedPythonExe bin/run-in-dir.py %2:d $unsiloedPythonExe %2:f
        $unsiloedPythonExe %5 %1 %0 __ISCIMOZ_LITE_INTERFACE__ \@%1:d/ISciMoz_lite_gen.idl.fragment __ISCIMOZ_INTERFACE__ \@%1:d/ISciMoz_gen.idl.fragment
    )
);

# build the typelibs and headers from the idl files
$cons->Install($idlExportDir, 'ISciMoz.idl');
$cons->Install($idlExportDir, 'ISciMozEvents.idl');
$cons->Install($idlExportDir, 'ISciMozController.idl');
$cons->BuildAndInstallXpt('ISciMoz.idl');
$cons->BuildAndInstallXpt('ISciMozEvents.idl');
$cons->BuildAndInstallXpt('ISciMozController.idl');
$cons->BuildHeaderFromIdl('ISciMoz.idl');
$cons->BuildHeaderFromIdl('ISciMozEvents.idl');
$cons->Preprocess('koScintillaController.p.py','koScintillaController.py');
$cons->InstallXpcomComponent('koScintillaController.py');


# build and install the Mozilla plugin
my $pluginName;
my $xScintillaBuildDir = DirPath($scintillaBuildDir);

if ($platform eq "win") {
    $pluginName = 'npscimoz.dll';

    my $LDFLAGS = "/dll kernel32.lib user32.lib gdi32.lib shell32.lib advapi32.lib xpcom.lib nspr4.lib plugingate_s.lib xpcom_core.lib";
    foreach my $libDir (split(';', $mozLibPath)) {
        $LDFLAGS .= " /libpath:$libDir";
    }
    $LDFLAGS .= " /libpath:$mozObjDir\\modules\\plugin\\tools\\sdk\\samples\\common";
    my $CXXFLAGS = "/W3 /D_WINDOWS /DWIN32 " .
        " /I$xScintillaBuildDir/include" .
        " /I$mozSrc/mozilla/modules/plugin/tools/sdk/samples/include ".
        " /I$mozDevelDist/include/xulapp" .
        " /I$mozSrc/mozilla/xpcom/ds" .
        " /I$mozDevelDist/include/widget" .
        " /I$mozDevelDist/include/dom" .
        " /I$mozDevelDist/include/string" .
        " /I$mozDevelDist/include/xpcom" .
        " /I$mozDevelDist/include/nspr" .
        " /I$mozDevelDist/include/content" .
        " /I$mozDevelDist/include/gfx" .
        " /I$mozDevelDist/include/plugin" .
        " /I$mozDevelDist/include/java";
    $CXXFLAGS .= " /FI$mozObjDir\\mozilla-config.h";
    $CXXFLAGS .= " /DCONTAINER_HANDLES_EVENTS=1 /DINCLUDE_DEPRECATED_FEATURES";

    if ($buildType eq 'debug') {
        $CXXFLAGS .= " /ZI /Od /DDEBUG /D_DEBUG /MDd";
        $LDFLAGS .= " /DEBUG";
    } else {
        $CXXFLAGS .= " /Ox /DNDEBUG /D_NDEBUG /MD";
        # LDFLAGS is fine!
    }

    if ($compiler ne "vc6") {
        # To avoid linker problems like this:
        #     nsSciDoc.obj : error LNK2019: unresolved external symbol "__declspec(dllimport) wchar_t * __cdecl ToNewUnicode(class nsAString_internal const &)" (__imp_?ToNewUnicode@@YAPA_WABVnsAString_internal@@@Z) referenced in function "public: virtual unsigned int __stdcall SciDoc::TransformLineEnds(wchar_t const *,int,wchar_t * *)" (?TransformLineEnds@SciDoc@@UAGIPB_WHPAPA_W@Z)
        # The problem is the mangled linkage name. Attempting to import:
        #   ?ToNewUnicode@@YAPA_WABVnsAString_internal@@@Z (wchar_t * __cdecl ToNewUnicode(class nsAString_internal const &)
        # But the export is:
        #   ?ToNewUnicode@@YAPAGABVnsAString_internal@@@Z (unsigned short * __cdecl ToNewUnicode(class nsAString_internal const &))
        # From http://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B_Name_Mangling
        #   '_W' means __wchar_t
        #   'G'  means unsigned short
        # From http://groups.google.com/group/mozilla.dev.embedding/browse_thread/thread/454eea957b336805
        #   Use '-Zc:wchar_t-' (Treat wchar_t as Built-In Type: NO) option.
        $CXXFLAGS .= " -Zc:wchar_t-";
    }

    # Others parts of the build for other platforms are defining these.
    # TODO: Clean up #define's in the file. This Conscript is a mess
    #       and is causing confusion. Note that MOZILLA_INTERNAL_API
    #       is hardwired in one of the .cxx|.h files so should be removed
    #       from this Conscript.
    $CXXFLAGS .= " /DMOZ_VERSION=$mozVersionNumber /DMOZILLA_INTERNAL_API=1";

    foreach my $includeDir (split(';', $mozIncludePath)) {
        $CXXFLAGS .= " /I$includeDir"
    }

    $cons->Command($pluginName,
        "npscimoz.rc",
        "plugin.cxx",
        "nsSciMoz.cxx",
        "nsSciMozWin.cxx",
        "sendscintilla.cxx",
        "npscimoz.def",
        "plugin.h",
        "nsSciMoz.h",
        "SciMozEvents.h",
        "npscimoz_gen.h",
        "sendscintilla.h",
        "ISciMoz.h",
        "ISciMozEvents.h",
        # scintilla must be built first (this is a little artificial because
        # this is only necessary to get the scintilla headers in the build
        # directory before this build
        "$scintillaBuildDir/bin/SciLexer.dll",
        qq(
            rc /fo%1:b.res %1
            cl /nologo $CXXFLAGS /TP /Fo%2:b.obj /c %2
            cl /nologo $CXXFLAGS /TP /Fo%3:b.obj /c %3
            cl /nologo $CXXFLAGS /TP /Fo%4:b.obj /c %4
            cl /nologo $CXXFLAGS /TP /Fo%5:b.obj /c %5
            link /nologo $LDFLAGS /out:%0 %2:b.obj %3:b.obj %4:b.obj %5:b.obj %1:b.res /DEF:%6
        )
    );
}

elsif ($platform eq "darwin") {
    $pluginName = "SciMoz.plugin";

    %consLocal = $cons->copy();
    $consLocal{'LDFLAGS'} = "-dynamic";
    $consLocal{'LIBS'} = "-bundle -lplds4 -lplc4 -lnspr4 -lxpcom -lxpcom_core -lscintilla ";
    if ($mozVersionNumber >= 190) {
      $consLocal{'LIBS'} .= " -Wl,-dead_strip -L$mozDevelDist/bin ";
      $consLocal{'LIBS'} .= " -Wl,-executable_path,$mozDevelDist/bin ";
      $consLocal{'LIBS'} .= " -L$mozDevelDist/lib ";
      $consLocal{'LIBS'} .= " $mozDevelDist/lib/libxpcomglue_s.a ";
    }
    # add required frameworks
    $consLocal{'LIBS'} .= "-framework Carbon -framework CoreFoundation ";
    # scintilla
    

    $consLocal{'CPPPATH'} = "$scintillaBuildDir/include:$scintillaBuildDir/src:$scintillaBuildDir/macosx:$mozIncludePath:$mozDevelDist/include/java";
    $consLocal{'LIBPATH'} = "$mozLibPath:$mozObjDir/modules/plugin/tools/sdk/samples/common:$mozBin";
    $consLocal{'CXXFLAGS'} = " -Wall -Wno-non-virtual-dtor -fno-exceptions -fno-rtti -fno-common ";
    # XXX cannot build universal unless mozilla is universal
    if ($universal) {
        $consLocal{'CXXFLAGS'} .= " -isysroot /Developer/SDKs/MacOSX10.4u.sdk"; # -arch ppc -arch i386";
        $consLocal{'CFLAGS'} .= " -isysroot /Developer/SDKs/MacOSX10.4u.sdk"; # -arch ppc -arch i386";
        $consLocal{'LDFLAGS'} .= " -Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk"; # -arch ppc -arch i386";
    }
    $consLocal{'CXXFLAGS'} .= " -DSCI_NAMESPACE=1 -DMACOSX=1 -DSCI_LEXER ".
                            " -DCONTAINER_HANDLES_EVENTS=1 -DINCLUDE_DEPRECATED_FEATURES".
                            " -DXP_MACOSX=1 -DNO_X11=1 -DUSE_SYSTEM_CONSOLE=1 ".
                            " -DMOZILLA_INTERNAL_API=1 -DMOZ_VERSION=$mozVersionNumber ";
    # to have SciMoz use carbon instead of quickdraw, do the following
    #if ($mozVersionNumber >= 190) {
    #    $consLocal{'CXXFLAGS'} .= " -DUSE_CARBON=1";
    #}
    $consLocal{'CXXFLAGS'} .= " -include Carbon/Carbon.h ";

    # Ensure that these are defined for use by mozilla headers
    $consLocal{'CXXFLAGS'} .= " -include $mozObjDir/mozilla-config.h " .
        " -I$mozSrc/mozilla/modules/plugin/tools/sdk/samples/include ".
        " -I$mozDevelDist/include" .
        " -I$mozDevelDist/include/xulapp" .
        " -I$mozDevelDist/include/widget" .
        " -I$mozDevelDist/include/dom" .
        " -I$mozDevelDist/include/string" .
        " -I$mozDevelDist/include/xpcom" .
        " -I$mozSrc/mozilla/xpcom/ds" .
        " -I$mozDevelDist/include/nspr" .
        " -I$mozDevelDist/include/content" .
        " -I$mozDevelDist/include/gfx" .
        " -I$mozDevelDist/include/plugin" .
        " -I$mozDevelDist/include/java" .
	" -I/Developer/Headers/FlatCarbon";

    if ($buildType eq 'debug') {
        $consLocal{'CXXFLAGS'} .= " -g";
        $consLocal{'CXXFLAGS'} .= " -DNS_DEBUG -DDEBUG "; # for debugging
    } else {
        $consLocal{'CXXFLAGS'} .= " -Os ";
        # XXX - There may be an equivalent to -faltivec for mac x86
        if ("$architecture" ne "x86") {
            $consLocal{'CXXFLAGS'} .= " -faltivec -mcpu=7400 -mtune=7400 -mpowerpc -mpowerpc-gfxopt";
        }
    }

    $consLocal = new cons(%consLocal);
    $consLocal->Depends("SciMoz", "$scintillaBuildDir/bin/libscintilla.dylib");

    $consLocal->Program(
	"SciMoz",
	"npmac.cpp",
	"plugin.cxx",
	"nsSciMoz.cxx",
	"nsSciMozMac.cxx",
	"sendscintilla.cxx",
	);

    # here we build the bundle package
    # we also manually install since installRecursive likes to mess on up this.
    $cons->Command("$pluginName/Contents/MacOS/SciMoz",
		"SciMoz.r",
		"Info.plist",
		"English.lproj/InfoPlist.strings",
		"./SciMoz",
		(
		 qq(
$unsiloedPythonExe bin/run-in-dir.py %1:d rm -Rf SciMoz.plugin
$unsiloedPythonExe bin/run-in-dir.py %1:d mkdir -p SciMoz.plugin
$unsiloedPythonExe bin/run-in-dir.py %1:d mkdir -p SciMoz.plugin/Contents
$unsiloedPythonExe bin/run-in-dir.py %1:d mkdir -p SciMoz.plugin/Contents/MacOS
$unsiloedPythonExe bin/run-in-dir.py %1:d mkdir -p SciMoz.plugin/Contents/Resources
$unsiloedPythonExe bin/run-in-dir.py %1:d cp Info.plist SciMoz.plugin/Contents
$unsiloedPythonExe bin/run-in-dir.py %1:d chmod u+w SciMoz.plugin/Contents/Info.plist
$unsiloedPythonExe bin/run-in-dir.py %1:d cp -R English.lproj SciMoz.plugin/Contents/Resources
$unsiloedPythonExe bin/run-in-dir.py %1:d /Developer/Tools/Rez -useDF -i /Developer/Headers/FlatCarbon /Developer/Headers/FlatCarbon/Types.r SciMoz.r -o SciMoz.plugin/Contents/Resources/SciMoz.rsrc
$unsiloedPythonExe bin/run-in-dir.py %1:d cp SciMoz SciMoz.plugin/Contents/MacOS/SciMoz
$unsiloedPythonExe bin/run-in-dir.py %1:d chmod -R a+r SciMoz.plugin
$unsiloedPythonExe bin/run-in-dir.py %1:d rm -rf $mozPluginsDir/$pluginName
$unsiloedPythonExe bin/run-in-dir.py %1:d mkdir -p $mozPluginsDir
$unsiloedPythonExe bin/run-in-dir.py %1:d cp -R SciMoz.plugin $mozPluginsDir/$pluginName
chmod a+rX $mozPluginsDir/$pluginName
                   )
		));

} 
else {
    $pluginName = "libnpscimoz.so";

    %consLocal = $cons->copy();
    $consLocal{'LIBS'} = " -lplds4 -lplc4 -lnspr4 -lpthread -lplugingate_s";
    $consLocal{'LIBS'} .= " $xScintillaBuildDir/bin/scintilla.a";

    # PCRE is built from contrib/pcre and is require by LexUDL.
    $consLocal{'LIBS'} .= " $xScintillaBuildDir/gtk/libpcre.a";

    $consLocal{'CPPPATH'} = "$mozIncludePath:$scintillaBuildDir/include:$mozDevelDist/include/java";
    $consLocal{'LIBPATH'} = "$mozLibPath:$mozObjDir/modules/plugin/tools/sdk/samples/common:../scintilla/bin";
    $consLocal{'CC'} = "gcc";

    ## XXX PKG_CONFIG_PATH env var will point to pgkconfig dir for the platform
    ## for GTK2 builds, we want two defines, GTK and GTK2
    my $gtkConfig = "`pkg-config --cflags gtk+-2.0` -DGTK2 -DGTK2_XEMBED";

    chomp($gtkConfig);
    $consLocal{'CXXFLAGS'} = " -DGTK -W -Wall -Wno-non-virtual-dtor -fno-exceptions -fno-rtti ".
        $gtkConfig;
    $consLocal{'CXXFLAGS'} .= " -DCONTAINER_HANDLES_EVENTS=1 -DINCLUDE_DEPRECATED_FEATURES";
    $consLocal{'CXXFLAGS'} .= " -fPIC";
    $consLocal{'CFLAGS'} = " -fPIC"; # one of these two -fPIC's might be redundant

    # Ensure that these are defined for use by mozilla headers
    $consLocal{'CXXFLAGS'} .= " -include $mozObjDir/mozilla-config.h " .
        " -I$mozSrc/mozilla/modules/plugin/tools/sdk/samples/include ".
        " -I$mozDevelDist/include" .
        " -I$mozDevelDist/include/xulapp" .
        " -I$mozSrc/mozilla/xpcom/ds" .
        " -I$mozDevelDist/include/widget" .
        " -I$mozDevelDist/include/dom" .
        " -I$mozDevelDist/include/string" .
        " -I$mozDevelDist/include/nspr" .
        " -I$mozDevelDist/include/xpcom" .
        " -I$mozDevelDist/include/content" .
        " -I$mozDevelDist/include/gfx" .
        " -I$mozDevelDist/include/plugin" .
        " -I$mozDevelDist/include/java" .
        " -DMOZ_VERSION=$mozVersionNumber";
        
    # XXX The _Right_ fix is to depend on the version of gcc being used,
    #     however, in the name of expediency we are just if'ing on the
    #     Linux dist.
    if ($linuxDistro =~ /^redhat/) {
        $consLocal{'CXXFLAGS'} .= " -fshort-wchar";
    }

    # Solaris ships with broken X11 headers that do not specify int
    # return types.  The -fpermissive flag converts the errors g++
    # would otherwise generate into warnings.
    if ($platform eq "solaris") {
        $consLocal{'CXXFLAGS'} .= " -fpermissive"
    }

    if ($buildType eq 'debug') {
        $consLocal{'CXXFLAGS'} .= " -g";
        $consLocal{'CXXFLAGS'} .= " -DNS_DEBUG "; # for debugging
    } else {
        $consLocal{'CXXFLAGS'} .= " -O2";
    }
    $consLocal{'LDFLAGS'} = "-shared `pkg-config --libs gthread-2.0 gtk+-2.0`";
    $consLocal{'LDFLAGS'} .= " -fPIC";

    # On Solaris, you have to use the -mimpure-text option if you are linking
    # a shared library that links to static libs (like scintilla.a).
    if ($platform eq "solaris") {
        $consLocal{'LDFLAGS'} .= " -mimpure-text";
    }

    $consLocal = new cons(%consLocal);
    $consLocal->Depends($pluginName, "$scintillaBuildDir/bin/scintilla.a");

    #XXX have to add licensing code here as well.
    $consLocal->Program($pluginName,
        "plugin.cxx",
        "nsSciMoz.cxx",
        "nsSciMozGtk.cxx",
        "sendscintilla.cxx",
    );
}

if ($platform eq "darwin") {
} else {
    $cons->Install("$mozPluginsDir", $pluginName);
}


if ($platform ne "linux") { # until this can be worked on for more than darwin
# the SciDoc XPCOM component
$cons->Install($idlExportDir, 'ISciDoc.idl');
$cons->BuildAndInstallXpt('ISciDoc.idl');
$cons->BuildHeaderFromIdl('ISciDoc.idl');

if ($platform eq "win") {
    my $LDFLAGS = "/libpath:$xScintillaBuildDir\\bin ";
    my $CXXFLAGS = "/I$xScintillaBuildDir/include /I$xScintillaBuildDir/src ";
    foreach my $includeDir (split(';', $mozIncludePath)) {
        $CXXFLAGS .= " -I$includeDir";
    }
    foreach my $libDir (split(';', $mozLibPath)) {
        $LDFLAGS .= " /libpath:$libDir";
    }

    $CXXFLAGS .= ' -I./include';
    $CXXFLAGS .= ' -I./include/private';
    $LDFLAGS .= " xpcom.lib nspr4.lib xpcom_core.lib SciLexer.lib ";
    if ($mozVersionNumber >= 190) {
        $LDFLAGS .= " xpcomglue.lib";
    }
    $LDFLAGS .= " /dll";
    $CXXFLAGS .= " -DLAYERS -W3 -D_WINDOWS -DWIN32 -DMOZILLA_INTERNAL_API=1 ";
    $CXXFLAGS .= " -D_IMPL_NS_LAYOUT -DMOZ_VERSION=$mozVersionNumber";
    $CXXFLAGS .= " /FI$mozObjDir\\mozilla-config.h";

    if ($buildType eq 'debug') {
        $LDFLAGS .= " /DEBUG";
        $CXXFLAGS .= " /Od -Zi  -DDEBUG  -D_DEBUG -MDd";
    } else {
        $CXXFLAGS .= " /Ox -DNDEBUG -D_NDEBUG -MD";
        # LDFLAGS is fine!
    }
    $dllName = 'koSciDoc.dll';

    if ($compiler ne "vc6") {
        # See discussion above for same option for nsSciMoz.cxx build.
        $CXXFLAGS .= " -Zc:wchar_t-";
    }

    $cons->Command($dllName,
        "nsSciDoc.cxx",
        "ISciDoc.idl",
        "ISciDoc.h",
        "$scintillaBuildDir/bin/SciLexer.dll",
        qq(
            cl /nologo $CXXFLAGS /Fo%1:b.obj /c %1
            link /nologo $LDFLAGS /out:%0 %1:b.obj
        )
    );
}

else {
    %consLocal = $cons->copy();

    $consLocal{'LIBPATH'} = "$mozLibPath:$mozBin";
    $consLocal{'CPPPATH'} = "$mozIncludePath:$scintillaBuildDir/include:$scintillaBuildDir/src";
    $consLocal{'CXXFLAGS'} .= " -I$mozDevelDist/include/content" .
        " -I$mozDevelDist/include/necko" .
        " -I$mozDevelDist/include/layout";
    $consLocal{'CXXFLAGS'} .= " -DSCI_NAMESPACE=1 -DSCI_LEXER ".
                            " -DCONTAINER_HANDLES_EVENTS=1 -DINCLUDE_DEPRECATED_FEATURES".
                            " -DUSE_SYSTEM_CONSOLE=1 ".
                            " -DMOZILLA_INTERNAL_API=1 -DMOZ_VERSION=$mozVersionNumber ";

    $consLocal{'CXX'} = "g++";
    $consLocal{'CC'} = "gcc";
    $consLocal{'LIBS'} = "-lxpcom -lnspr4 -lplds4 -lplc4 -lxpcom_core -lscintilla ";
    if ($mozVersionNumber >= 190) {
      $consLocal{'LIBS'} = "-lxpcomglue ".$consLocal{'LIBS'};
    }
    if ($platform eq "darwin") {
        $consLocal{'LDFLAGS'} = "-framework Carbon -bundle";
        $consLocal{'CXXFLAGS'} .= " -DMACOSX=1 -DXP_MACOSX=1 -DNO_X11=1 ";
        if ($universal) {
            $consLocal{'CXXFLAGS'} .= " -isysroot /Developer/SDKs/MacOSX10.4u.sdk"; # -arch ppc -arch i386";
            $consLocal{'CFLAGS'} .= " -isysroot /Developer/SDKs/MacOSX10.4u.sdk"; # -arch ppc -arch i386";
            $consLocal{'LDFLAGS'} .= " -Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk"; # -arch ppc -arch i386";
        }
    } else {
        $consLocal{'LDFLAGS'} = "-fPIC -shared";
        $consLocal{'CXXFLAGS'} .= " -fPIC";
    }
    $consLocal{'CXXFLAGS'} .= " -fno-rtti -DLAYERS -Wall -Wno-non-virtual-dtor -DMOZILLA_INTERNAL_API=1 -D_IMPL_NS_LAYOUT";
    $consLocal{'CXXFLAGS'} .= " -include $mozObjDir/mozilla-config.h -DMOZ_VERSION=$mozVersionNumber";

    if ($platform eq "solaris" or ($platform eq "darwin" and $architecture ne "x86")) {

	# big-endian byte order indicator to license code
        $consLocal{'CXXFLAGS'} .= " -DBYTEORDER=0x4321";
    }
    # On Solaris, you have to use the -mimpure-text option if you are linking
    # a shared library that links to static libs.
    if ($platform eq "solaris") {
        $consLocal{'LDFLAGS'} .= " -mimpure-text";
    }

    if ($buildType eq 'debug') {
        $consLocal{'CXXFLAGS'} .= " -g -DDEBUG -D_DEBUG";
    } else {
        $consLocal{'CXXFLAGS'} .= " -DNDEBUG -D_NDEBUG";
        if ($withSymbols) {
            $consLocal{'CXXFLAGS'} .= " -g";
        }
    }
    if ($platform eq "darwin") {
      $consLocal{'DYLD_LIBRARY_PATH'} = "$mozSrc/mozilla/dist/bin";
      $dllName = "libkoSciDoc.dylib";
    } else {
      $dllName = 'libkoSciDoc.so';
    }
    $consLocal = new cons(%consLocal);

    $consLocal->Program($dllName,
                        "nsSciDoc.cxx");
}

$cons->InstallXpcomComponent($dllName);

}
