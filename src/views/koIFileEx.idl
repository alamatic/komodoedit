/* Copyright (c) 2003-2006 ActiveState Software Inc.
   See the file LICENSE.txt for licensing information.
   
   Authors: David Ascher, Shane Caraveo
   
*/

#include "nsISupports.idl"
#include "nsIObserverService.idl"

/*
  koIFile represents a file on disk.
  
  this is very close to the nsIFile interface, we could
  consider inheriting from that
*/

[scriptable, uuid(46D252D6-1A08-49AA-9396-338034BA537B)]
interface koIFileEx : nsISupports
{
    boolean open(in string mode);
    void read(in unsigned long aCount, out unsigned long count, [array, size_is(count), retval] out octet text);
    void write([array, size_is(count)] in octet text, in unsigned long count);
    // xpconnect does not handle 'octet' correctly, so need alternative
    // to write()
    void puts(in wstring text);
    wstring readfile();
    void flush();
    void close();

    // changing any one of the following three affects the following 6
    attribute wstring displayPath;// URI if URI not of file:// scheme.
    attribute wstring URI; 
    attribute wstring server;
    attribute wstring path;
    attribute wstring leafName; // XXX get rid of this
    readonly attribute wstring baseName;
    readonly attribute wstring dirName;
    readonly attribute string scheme;
    readonly attribute wstring ext; // the extension
    readonly attribute string md5name;
    
    // these return the uri/path encoded to the filesystem encoding
    // which is, in python, sys.getfilesystemencoding().
    // on windows, mbcs, on darwin, utf-8, linux may be many things
    // these should be used for any low level file operations such as open
    // in python
    attribute string encodedURI; 
    attribute string encodedPath;
    
    attribute unsigned long permissions; // aka "mode"
    
    // various attributes of a file
    readonly attribute boolean isLocal;
    readonly attribute boolean isRemoteFile;    // FTP, SCP, SFTP etc...
    readonly attribute PRInt64 lastModifiedTime;
    readonly attribute PRInt64 createdTime;
    readonly attribute PRInt64 lastAccessedTime;
    readonly attribute PRInt64 fileSize;
    readonly attribute boolean exists;
    readonly attribute boolean closed;
    readonly attribute boolean isWriteable;
    readonly attribute boolean isReadable;
    readonly attribute boolean isReadOnly;
    readonly attribute boolean isReadWrite;
    readonly attribute boolean isExecutable;
    readonly attribute boolean isHidden;
    readonly attribute boolean isDirectory;
    readonly attribute boolean isFile;
    readonly attribute boolean isSymlink;
    
    /* This is a FIFO, SOCKET, etc. file type on linux.  Basicly, it
       is an alternate protocol using the file descriptor.  We also
       mark it true for the DBGP file spec */
    readonly attribute boolean isSpecial; 

    // hasChanged does a stat, checks to see if our cached stat info
    // is different than a current stat call.  If it is, then the
    // new stat info is saved into the cache
    readonly attribute boolean hasChanged; 

    // hasChangedNoStatUpdate does a stat, checks to see if our cached stat info
    // is different than a current stat call, but does not update the current
    // stat info with the new one.
    readonly attribute boolean hasChangedNoStatUpdate;

    // various attributes used by scc
    readonly attribute string  sccType;    // p4 or cvs, blank if not in scc
    readonly attribute string  sccDirType; // p4 or cvs, blank if not scc dir
    readonly attribute boolean sccExclude; // marker to exclude future checks
    readonly attribute boolean sccHaveOnDisk; // file is in local copy of repository
    readonly attribute string  sccLocalRevision;
    readonly attribute string  sccRevDate;
    readonly attribute string  sccDepotRevision;
    readonly attribute boolean sccNeedSync; // true if local and depot rev differs
    readonly attribute boolean sccConflict; // conflict from update
    readonly attribute string  sccAction; // edit|add|delete
    readonly attribute string  sccStatus; // status message such as 'up-to-date'
    readonly attribute string  sccChange; // change list number (p4)
    readonly attribute string  sccSummary; // used by the controller system --
                                           // combination of sccType, sccDirType,
                                           // sccNeedSync and sccAction
                                           // This needs to differ for two
                                           // files if the set of SCC actions
                                           // that can be applied to the two files
                                           // is different.
    
    // a method to retrieve keys and values for all status attributes
    // this is an optimization for js when we need to retreive all
    // of it.
    void getStatusMap([array, size_is(key_count)] out wstring keys,
                      out unsigned long key_count,
                      [array, size_is(val_count)] out wstring values,
                      out unsigned long val_count);
};

/*
  The koIFileService provides construction and caching of file objects.
  This can then be used by other services, such as the file status service
*/

[scriptable, uuid(F9E2D05A-B087-455B-9A62-78A095E92123)]
interface koIFileService: nsISupports
{
    koIFileEx getFileFromURI(in wstring URI);

    void getAllFiles([array, size_is(count)] out koIFileEx files,
                     out PRUint32 count);
    koIFileEx findFileByURI(in wstring URI);

    void getFilesInBaseURI(in wstring path,
                     [array, size_is(count)] out koIFileEx files,
                     out PRUint32 count);

    readonly attribute nsIObserverService observerService;
    
    wstring makeTempName(in wstring suffix); 
    wstring makeTempNameInDir(in wstring dir, in wstring suffix); 
    koIFileEx makeTempFile(in wstring suffix, in string mode);
    koIFileEx makeTempFileInDir(in wstring dir, in wstring suffix, in string mode);
    void deleteAllTempFiles();
    void deleteTempFile(in wstring fname, in boolean remove_fname);
};
