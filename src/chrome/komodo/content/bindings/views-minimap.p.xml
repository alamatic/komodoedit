<?xml version="1.0"?>
<!-- Copyright (c) 2000-2006 ActiveState Software Inc. -->
<!-- See the file LICENSE.txt for licensing information. -->

<!DOCTYPE bindings PUBLIC "-//MOZILLA//DTD XBL V1.0//EN" "http://www.mozilla.org/xbl">

<bindings
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<binding id="view-minimap"
    extends="chrome://komodo/content/bindings/views-buffer.xml#view-buffer-base">
    <content flex="1">
        <!--<xul:vbox anonid="minimap-vbox" flex="1">-->
            <xul:scintilla xbl:inherits="flex,focused,context,mozcontext" flex="1"
                           anonid="minimap"
                           allowIME="false"
                           mozcontext="minimapContextMenu"/>
        <!--</xul:vbox>-->
    </content>
    <implementation name="viewminimap" implements="koIScintillaView, koIBookmarkableView, ISciMozEvents, nsIObserver">

        <property name="scintilla" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'minimap');"/>

        <method name="init">
        <parameter name="view" />
        <body>
        <![CDATA[
            this.view = view;
        ]]>
        </body>
        </method>
        
        <method name="initMinimap">
        <parameter name="koDoc"/>
        <body><![CDATA[
        try {
            this.koDoc = koDoc;
            var scintilla = this.scintilla;
            scintilla.language = koDoc.language;
            scintilla.symbolMargin = true;
            scintilla.encoding = koDoc.encoding.python_encoding_name;
            scintilla.init();
            scintilla.readOnly = true;
            
            this.view._setupHighlightColors(scintilla);
            scintilla.scimoz.hookEvents(this);
            var mm_scimoz = scintilla.scimoz;
            mm_scimoz.zoom = -100;
            mm_scimoz.hScrollBar = false;
            mm_scimoz.vScrollBar = true;
            mm_scimoz.setMarginWidthN(2, 0);
            mm_scimoz.selEOLFilled = true;
            setTimeout(function() {
                this.syncMinimapFromBuffer();
            }.bind(this), 10);
        } catch (e) {
            this.log.exception(e, "Problem in initMinimap\n");
        }
        ]]>
        </body>
        </method>
        
        <method name="attachKoDoc">
        <parameter name="koDoc"/>
        <body>
        <![CDATA[
            this.koDoc = koDoc;
            koDoc.addScimoz(this.scimoz);
        ]]>
        </body>
        </method>
        
        <method name="releaseKoDoc">
        <body>
        <![CDATA[
            if (this.koDoc) {
                this.koDoc.releaseScimoz(this.scimoz)
            }
        ]]>
        </body>
        </method>
        
        <field name="_doMouseUp">false</field>
        <field name="firstDocLine">-1</field>
        <field name="lastDocLine">-1</field>
        
        <method name="syncMinimapFromBuffer">
        <body><![CDATA[
            var scimoz = this.view.scimoz;
            var numLines = scimoz.lineCount;
            var firstVisibleLine = scimoz.firstVisibleLine;
            var firstDocLine = scimoz.docLineFromVisible(firstVisibleLine);
            var lastDocLineOnScreen = scimoz.docLineFromVisible(firstVisibleLine + scimoz.linesOnScreen);

            var msz = this.scimoz;
            var spos = scimoz.positionFromLine(firstDocLine);
            var epos = scimoz.positionFromLine(lastDocLineOnScreen);
            msz.gotoPos(spos);
            msz.selectionStart = spos;
            msz.selectionEnd = epos;
            this.update_FVL_FromEditor();
            
            msz.gotoPos(spos);
            msz.selectionStart = spos;
            msz.selectionEnd = epos;
        ]]>
        </body>
        </method>
        
        <method name="update_FVL_FromEditor">
        <body><![CDATA[
            var scimoz = this.view.scimoz;
            var numLines = scimoz.lineCount;
            var firstVisibleLine = scimoz.firstVisibleLine;
            var firstDocLine = scimoz.docLineFromVisible(firstVisibleLine);
            var lastDocLineOnScreen = scimoz.docLineFromVisible(firstVisibleLine + scimoz.linesOnScreen);

            var msz = this.scimoz;

            // And update the minimap's scroll
            var numDocLines = scimoz.lineCount;
            var numVisibleLines = scimoz.visibleFromDocLine(numDocLines);
            if (numVisibleLines > scimoz.linesOnScreen) {
                var lastTopVisibleLine = numVisibleLines - scimoz.linesOnScreen;
                var numMSZVisibleLines = msz.visibleFromDocLine(msz.lineCount);
                var lastTopMSZVisibleLine = numMSZVisibleLines - msz.linesOnScreen;
                var portion_covered = firstVisibleLine / lastTopVisibleLine;
                var firstMSZVisibleLine = Math.round(lastTopMSZVisibleLine * portion_covered);
                if (firstMSZVisibleLine != msz.firstVisibleLine) {
                    // Save and restore the selection after changing
                    // the first visible line.(yeesh)
                    var sp = msz.selectionStart;
                    var se = msz.selectionEnd;
                    msz.firstVisibleLine = firstMSZVisibleLine;
                    msz.selectionStart = sp;
                    msz.selectionEnd = se;
                } else {
                    //dump("views-minimap.p.xml: update_FVL_FromEditor: no need to update minimap.fvl\n");
                }
            }
        ]]>
        </body>
        </method>

        <method name="close">
            <body><![CDATA[
            this.koDoc = null;
            ]]></body>
        </method>
        
        <!-- the blur event isn't firing, so rely on this method -->
        <method name="leaveMinimap">
        <parameter name="event"/>
        <body>
        <![CDATA[
        try {
            var scimoz = this.scimoz;
            if ('_scimoz_readOnly' in this) {
                scimoz.readOnly = this._scimoz_readOnly;
                scimoz.cursor = this._scimoz_cursor;
            } else {
                scimoz.readOnly = false;
                scimoz.cursor = scimoz.SC_CURSORNORMAL;
            }
        } catch(ex) {
            dump("blur problem: " + ex + "\n");
        }
        ]]>
        </body>
        </method>
        
        <!--ISciMozEvents implementation-->
        
        <method name="onUpdateUI">
        <body>
        <![CDATA[
            var firstDocLine, lastDocLineOnScreen;
            [firstDocLine, lastDocLineOnScreen] = this.getEditorViewBoundaries();
            
            var updateMinimap = (this.firstDocLine !== firstDocLine
                                 || this.lastDocLine !== lastDocLineOnScreen);
            if (!updateMinimap) {
                return;
            }
            this.view.syncBufferFromMinimap(this, false);
            this.syncMinimapFromBuffer();
            this.updateEditorViewBoundaries(firstDocLine, lastDocLineOnScreen);
        ]]>
        </body>
        </method>

        <method name="getClickedLineAndPosition">
        <parameter name="event" />
        <parameter name="scimoz" />
        <body>
        <![CDATA[
            var clientX = event.clientX;
            var clientY = event.clientY;
            var rect = this.getBoundingClientRect();
            var winX = this.boxObject.x;
            var winY = this.boxObject.y;
            winX = rect.left;
            winY = rect.top;
            var pos = scimoz.positionFromPoint(clientX - winX, clientY - winY);
            return [scimoz.lineFromPosition(pos), pos];
        ]]>
        </body>
        </method>

        <method name="handleButtonClick">
        <parameter name="event" />
        <body>
        <![CDATA[
            var scimoz = this.scimoz;
            var targetDocLineNo, pos;
            [targetDocLineNo, pos] = this.getClickedLineAndPosition(event, scimoz);
            var vs = this.view.scimoz;
            var targetVisibleLine_V = vs.visibleFromDocLine(targetDocLineNo);
            // And position it in the middle of the V screen
            var numVisibleLinesBefore_V = Math.round(vs.linesOnScreen / 2);
            var firstVisibleLine = targetVisibleLine_V - numVisibleLinesBefore_V;
            if (firstVisibleLine < 0) firstVisibleLine = 0;
            
            // 1: Update the view FVL
            vs.firstVisibleLine = firstVisibleLine;

            // 2: Update the minimap selection
            var firstDocLine = scimoz.docLineFromVisible(firstVisibleLine);
            var lastDocLine = scimoz.docLineFromVisible(firstVisibleLine + vs.linesOnScreen);

            var selectionStart = scimoz.positionFromLine(firstDocLine);
            scimoz.gotoPos(selectionStart);
            scimoz.selectionStart = selectionStart;
            scimoz.selectionEnd = scimoz.positionFromLine(lastDocLine);
            
            // 3. Update the MM FVL
            this.update_FVL_FromEditor();
        ]]>
        </body>
        </method>

        <method name="_reportEvent">
        <parameter name="event" />
        <body>
        <![CDATA[
//            dump("views-minimap: "
//+ event.type + ": event.button: " + event.button
//+ ", phase: " + event.eventPhase
//+ "\n");
        ]]>
        </body>
        </method>

        <method name="_squelchEvent">
        <parameter name="event" />
        <body>
        <![CDATA[
            //if (event.button !== 0) {
            //    // Only interested in the left-button down
            //    dump("Not interested in button " + event.button + "\n")
            //    return true;
            //}
            event.preventDefault();
            event.cancelBubble = true;
            event.stopPropagation();
            return false;
        ]]>
        </body>
        </method>

        <method name="_startMouseMove">
        <parameter name="event" />
        <body>
        <![CDATA[
            var scimoz = this.scimoz;
            // Drag the current selection only if we click on it.  Otherwise ignore
            // the mouseDown event, and just handle the click event
            var targetDocLineNo, pos, selectionStart, selectionEnd;
            [targetDocLineNo, pos] = this.getClickedLineAndPosition(event, scimoz);
            var selectionStart = scimoz.selectionStart, selectionEnd = scimoz.selectionEnd;
            if (pos < selectionStart || pos > selectionEnd) {
                // Make the current line the center of the selection
                this.handleButtonClick(event);
                selectionStart = scimoz.selectionStart;
                selectionEnd = scimoz.selectionEnd;
            }
            // Get the line offset
            this.lineOffsetAbove = targetDocLineNo - scimoz.lineFromPosition(selectionStart);
            this.lineOffsetBelow = scimoz.lineFromPosition(selectionEnd) - targetDocLineNo;
            this._followMouseMove = this.ignoreSyncRequests = true;
        ]]>
        </body>
        </method>
    </implementation>
    <handlers>
<!--  phase="capturing" -->
        <handler event="keypress"> 
            <![CDATA[
            // Dispatch all keypress events on the minimap onto the main view.
            var newEvent = document.createEvent("KeyEvents");
            newEvent.initKeyEvent(event.type, event.bubbles, event.cancelable,
                                  event.target.ownerDocument.defaultView,
                                   event.ctrlKey, 
                                   event.altKey,
                                   event.shiftKey,
                                   event.metaKey,
                                   event.keyCode,
                                   event.charCode);
            // If the view doesn't have the focus the keypress event will be ignored.
            this.view.scintilla.focus();
            this.view.scintilla.dispatchEvent(newEvent);
            event.preventDefault();
            event.cancelBubble = true;
            event.stopPropagation();
            return false;
            ]]>
        </handler>
        
        <handler event="mouseover">
        <![CDATA[
        var scimoz = this.scimoz;
        this._scimoz_readOnly = scimoz.readOnly;
        this._scimoz_cursor = scimoz.cursor;
        scimoz.readOnly = true;
        scimoz.cursor = scimoz.SC_CURSORARROW;
        ]]>
        </handler>
        
        <handler name="mouseout" phase="capturing">
        <![CDATA[
                 this.leaveMinimap();
        ]]>
        </handler>
        <handler event="mousedown" phase="capturing">
            <![CDATA[
            this._reportEvent(event);
            return this._squelchEvent(event);
            ]]>
        </handler>
        <handler event="mousedown">
            <![CDATA[
            this._reportEvent(event);
            return this._squelchEvent(event);
            ]]>
        </handler>
        <handler event="mouseup" phase="capturing">
            <![CDATA[
            this._reportEvent(event);
            return this._squelchEvent(event);
            ]]>
        </handler>
        <handler event="mousemove" phase="capturing">
            <![CDATA[
            //this._reportEvent(event);
            return this._squelchEvent(event);
            ]]>
        </handler>

        <handler event="xxx_click" phase="capturing">
            <![CDATA[
            event.preventDefault();
            event.cancelBubble = true;
            event.stopPropagation();
            return false;
            //]]>
        </handler>

        <handler event="click" phase="capturing">
            <![CDATA[
            // When possible, the clicked line corresponds to the middle of the
            // new view screen to display
            try {
                this._reportEvent(event);
                if (event.button === 0) {
                    this.handleButtonClick(event);
                }
            } catch(ex) {
                dump("mouse click: " + ex + "\n");
            }
            ]]>
        </handler>
    </handlers>

</binding>


</bindings>

