/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface ISciMoz;
interface koIFindSession; // forward decl.
interface koIFindResultsTabManager; // forward decl.
interface koIFindResultsView; // forward decl.

[scriptable, uuid(94366D2F-6C10-455b-90B7-EC077161CDA2)]
interface koIFindResult : nsISupports {
    // The id for a searchable view.
    //XXX Should change the name to viewId (or similar) at some point.
    attribute wstring url;
    // zero-based indeces into the search text demarking the find result
    attribute PRUint32 start;
    attribute PRUint32 end;
    // the string found (not sure if this is really necessary, but should
    // be useful for debugging)
    readonly attribute wstring value;

    // Some data that can be filled in lazily. This data is not guaranteed to
    // be set.
    attribute PRUint32 line;
    attribute PRUint32 column;
    attribute wstring context_;
};


[scriptable, uuid(2EE0CACF-D3BF-44a8-BCAC-952D6418B1C6)]
interface koIReplaceResult : koIFindResult {
    // the string with which to replace the value
    readonly attribute wstring replacement;
};


[scriptable, uuid(BB453BC9-FCF7-4625-A3FB-590418F48BF5)]
interface koIFindOptions: nsISupports {
    // pattern types
    attribute PRUint32 patternType;
    const long FOT_SIMPLE = 0;       // search for a simple string
    const long FOT_WILDCARD = 1;     // use shell-like filename matching of the search pattern
    const long FOT_REGEX_PYTHON = 2; // the search pattern is a regex (Python syntax)

    attribute boolean matchWord;    // whether to match whole words
    attribute boolean searchBackward;

    // case sensitivity options
    attribute PRUint32 caseSensitivity;
    const long FOC_INSENSITIVE = 0;  // case insensitive searching
    const long FOC_SENSITIVE = 1;    // case sensitive
    const long FOC_SMART = 2;        // case sensitive iff pattern includes any uppercase letters

    // One of FCT_CURRENT_DOC or FCT_ALL_OPEN_DOCS.
    // This is set by the find dialog (when the user manually switches the
    // context there) and is used by cmd_findNext and cmd_findPrevious in
    // the main Komodo window. Opening the find dialog resets this to
    // FCT_CURRENT_DOC (see bug 20003 for why).
    //
    // Persisted in the 'find-preferredContextType' pref.
    attribute long preferredContextType; 

    attribute boolean showReplaceAllResults;
    attribute boolean displayInFindResults2;

    // Find in Files stuff:
    // - The folders in which to search
    //   This is a _list_ of folders but this list is often represented in
    //   the UI as a string encoded by joining the folders with the
    //   native path separator. E.g. on Windows: "D:\trentm;D:\tmp". It is
    //   easier with XPCOM to just pass around the encoded string.
    attribute wstring encodedFolders;
    void getFolders(out PRUint32 count,
                    [retval, array, size_is(count)] out wstring folders);
    // - Whether to search in subfolders
    attribute boolean searchInSubfolders;
    // - The filetype to search (see 'encoding' note with folders)
    attribute wstring encodedIncludeFiletypes;
    void getIncludeFiletypes(out PRUint32 count,
                             [retval, array, size_is(count)] out wstring filetypes);
    attribute wstring encodedExcludeFiletypes;
    void getExcludeFiletypes(out PRUint32 count,
                             [retval, array, size_is(count)] out wstring filetypes);
};


[scriptable, uuid(19A373A9-77EC-4c96-B86F-1928018AB924)]
interface koIFindService : nsISupports {
    // Error notes:
    //  If an exception is raise in any of the Find service's methods
    //  then details of the error are set on the koILastErrorService.
    //  Only an error *message* is set, not an error number.

    // Return the result of searching for the first "pattern" in "text".
    koIFindResult find(in wstring url,
                       in wstring text,
                       in wstring pattern,
                       in long startOffset);

    // Return a result indicating how to replace the first "pattern" in
    // "text" with "replacement".
    koIReplaceResult replace(in wstring url,
                             in wstring text,
                             in wstring pattern,
                             in wstring replacement,
                             in long startOffset);

    // A faster alternative to findall() specific to Komodo usage.
    // See the implementation for more docs.
    void findallex(in wstring url,
                   in wstring text,
                   in wstring pattern,
                   in koIFindResultsView resultsView,
                   in PRUint32 contextOffset,
                   in ISciMoz scimoz);

    // Find all lines on which the given pattern is found.
    // Returns a list of lines (0-based).
    void findalllines(in wstring url,
                      in wstring text,
                      in wstring pattern,
                      in PRUint32 contextOffset,
                      in ISciMoz scimoz,
                      out PRUint32 count,
                      [retval, array, size_is(count)] out PRUint32 lines);
    
    // A faster alternative to replaceall() specific to Komodo usage.
    // See the implementation for more docs.
    wstring replaceallex(in wstring url,
                         in wstring text,
                         in wstring pattern,
                         in wstring replacement,
                         in koIFindSession session,
                         in koIFindResultsView resultsView,
                         in PRUint32 contextOffset,
                         in ISciMoz scimoz,
                         out PRUint32 count); // number of replacements

    // Asynchronously find all occurences of "pattern" and load those into
    // the "resultsView". Note: the information on which files to search are
    // in the "options" attribute.
    //XXX Need to add a .finalize() to the find service to .stop() and
    //    .join() any findallinfiles thread.
    void findallinfiles(
            in long id, // session id
            in wstring pattern,
            in koIFindResultsTabManager resultsMgr,
            //XXX Drop this and put it in koIFindResultsTabManager eventually.
            in koIFindResultsView resultsView);

    // Asynchronously replace all "pattern" with "repl" and load those
    // into the "resultsView". Note: the information on which files to
    // search are in the "options" attribute.
    //XXX Need to add a .finalize() to the find service to .stop() and
    //    .join() any replaceallinfiles thread.
    void replaceallinfiles(
            in long id, // session id
            in wstring pattern,
            in wstring repl,
            in koIFindResultsTabManager resultsMgr,
            //XXX Drop this and put it in koIFindResultsTabManager eventually.
            in koIFindResultsView resultsView);

    // Abort a running findallinfiles or replaceallinfiles session.
    void stopfindreplaceinfiles(in long id);

    wstring regex_escape_string(in wstring s);

    // persistent find options
    attribute koIFindOptions options;
};

