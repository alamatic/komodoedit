<?xml version="1.0" encoding="UTF-8"?>
<!-- Komodo Project File - DO NOT EDIT -->
<project id="020c3156-5fbf-11db-8b3a-000d935d3368" kpf_version="4" name="firefox.kpf">
<folder id="19d5b619-5fc1-11db-8b3a-000d935d3368" idref="020c3156-5fbf-11db-8b3a-000d935d3368" name="project">
</folder>
<file id="1dadc0c4-5fc1-11db-8b3a-000d935d3368" idref="19d5b619-5fc1-11db-8b3a-000d935d3368" name="setup-wizard.xul" url="_prj_internal_/setup-wizard.xul">
</file>
<macro async="0" id="d191defd-ed2a-11db-b53b-000d935d3368" idref="19d5b619-5fc1-11db-8b3a-000d935d3368" keyboard_shortcut="" language="JavaScript" name="oncreate" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
var project = komodo.macro.project;
var wizard = project.getChildByAttributeValue('name','setup-wizard.xul', 1);
var prefset = project.prefset;
var data = {};
 
if (prefset.hasPrefHere("extension_nice_name")) {
    alert("The project has already been configured!");
    throw new Error("The project has already been configured!");
}

window.openDialog(wizard.getFile().URI,
                  "_blank",
                  "centerscreen,chrome,resizable,scrollbars,dialog=no,close,modal=yes",
                  data);

prefset.setStringPref("extension_nice_name", data.extension_nice_name);
data.extension_name = data.extension_nice_name.replace(' ','').toLowerCase();
prefset.setStringPref("extension_name", data.extension_name);
prefset.setStringPref("extension_version", data.extension_version);
prefset.setStringPref("extension_description", data.extension_description);
prefset.setStringPref("extension_author_name", data.extension_author_name);
prefset.setStringPref("extension_author_domain", data.extension_author_domain);
prefset.setStringPref("extension_homepage", data.extension_homepage);
prefset.setStringPref("extension_update_url", data.extension_update_url);
prefset.setStringPref("extension_profile_dir", data.extension_profile_dir);

function readFile(filename) {
    // read the template file
    var file = Components.classes["@activestate.com/koFileEx;1"]
            .createInstance(Components.interfaces.koIFileEx)
    file.URI = filename;
    file.open('rb');
    var content = file.readfile();
    file.close();
    return content;
}

function writeFile(filename, content) {
    // read the template file
    var file = Components.classes["@activestate.com/koFileEx;1"]
            .createInstance(Components.interfaces.koIFileEx)
    file.URI = filename;
    file.open('wb+');
    file.puts(content);
    file.close();
}

function interpolateContent(content, data) {
    for (var name in data) {
        var code = "${"+name+"}";
        content = content.replace(code, data[name], "g");
    }
    return content;
}

function interpolateFile(filename, data) {
    var content = readFile(filename);
    content = interpolateContent(content, data);
    writeFile(filename, content);
}

var dir = komodo.macro.project.getFile().dirName;
var os = Components.classes['@activestate.com/koOs;1'].
    getService(Components.interfaces.koIOs);
var files = [
             os.path.join(dir, "install.rdf"),
             os.path.join(dir, "devbuild.manifest"),
             os.path.join(dir, "chrome.manifest"),
             os.path.join(os.path.join(dir, "content"), "overlay.xul"),
            ];
for (var i =0; i &lt; files.length; i++) {
    interpolateFile(files[i], data);
}
} catch(e) {
    log.exception(e);
}</macro>
<macro async="0" id="dc63c6c5-ed2a-11db-b53b-000d935d3368" idref="19d5b619-5fc1-11db-8b3a-000d935d3368" keyboard_shortcut="" language="Python" name="build XPI" rank="100" trigger="trigger_postopen" trigger_enabled="0">
import sys, os, which
import process
import koprocessutils
from xpcom import components, COMException, nsError

wwatch = components.classes["@mozilla.org/embedcomp/window-watcher;1"].getService(components.interfaces.nsIWindowWatcher)
prompt = wwatch.getNewPrompter(wwatch.activeWindow)
userEnv = koprocessutils.getUserEnv()
userPath = userEnv["PATH"].split(os.pathsep)

def executeCmd(argv, cwd=None):
    try:
        p = process.ProcessOpen(argv, cwd=cwd, env=userEnv, stdin=None)
        return [p.communicate()]
    finally:
        p.close()

def findZipper():
    # look for zip or 7z
    if sys.platform.startswith('win'):
        exts = ['.exe']
    else:
        exts = None
    # get the current valid environment which is a combination of
    # the startup envirnment and modifications in komodo preferences
    for exe in [['zip','-Dr'], ['7z','a','-tzip']]:
        zip = which.whichall(exe[0], exts=exts, path=userPath)
        if zip:
            return exe
    else:
        prompt.alert("XPI Build Error","Unable to find 'zip' or '7z' on path")
        raise COMException(nsError.NS_ERROR_UNEXPECTED, "Unable to find 'zip' or '7z' on path")

# build the xpi
projectFile = komodo.macro.project.getFile()

prefset = komodo.macro.project.prefset;
if not prefset.hasPrefHere("extension_name"):
    prompt.alert("XPI Build Error","Extension Project is not properly configured!")
    raise COMException(nsError.NS_ERROR_UNEXPECTED, "Extension Project is not properly configured!")

extName = prefset.getStringPref("extension_name")
extVer = prefset.getStringPref("extension_version")
dirs = ['content', 'skin', 'locale', 'components']
cmd = []
zipper = findZipper()
for dir in dirs:
    path = os.path.join(projectFile.dirName, dir);
    if os.path.exists(path):
        cmd = zipper + ['%s.jar' % extName, dir]
        executeCmd(cmd, projectFile.dirName)

cmd = zipper + ["%s-%s.xpi" % (extName, extVer), '%s.jar' % extName, "install.rdf", "chrome.manifest"]
executeCmd(cmd, projectFile.dirName)

</macro>
<preference-set idref="020c3156-5fbf-11db-8b3a-000d935d3368">
  <string id="import_exclude_matches">*.*~;*.bak;*.tmp;CVS;.#*;*.pyo;*.pyc;.svn;*%*;_prj_internal_</string>
  <boolean id="import_live">1</boolean>
</preference-set>
</project>
