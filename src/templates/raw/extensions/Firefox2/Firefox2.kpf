<?xml version="1.0" encoding="UTF-8"?>
<!-- Komodo Project File - DO NOT EDIT -->
<project id="10f7e3f4-96c5-3940-9564-5ef8e9eed9ce" kpf_version="4" name="Firefox2.kpf">
<folder id="ee7a694b-2e5c-074d-be2e-2c50ee32d548" idref="10f7e3f4-96c5-3940-9564-5ef8e9eed9ce" name="project">
</folder>
<file id="de88c003-a9d7-e247-b084-01b32b80ab2d" idref="ee7a694b-2e5c-074d-be2e-2c50ee32d548" name="setup.xul" url="_prj_internal_/setup.xul">
</file>
<macro async="0" icon="chrome://komodo/content/icons/update-data.png" id="a4df70e1-07fd-b44a-9574-23a8f50135de" idref="ee7a694b-2e5c-074d-be2e-2c50ee32d548" keyboard_shortcut="" language="Python" name="build XPI" rank="100" trigger="trigger_postopen" trigger_enabled="0">
import sys, os, which
import process
import koprocessutils
from xpcom import components, COMException, nsError
from xml.dom.minidom import parseString

wwatch = components.classes["@mozilla.org/embedcomp/window-watcher;1"].getService(components.interfaces.nsIWindowWatcher)
prompt = wwatch.getNewPrompter(wwatch.activeWindow)
userEnv = koprocessutils.getUserEnv()
userPath = userEnv["PATH"].split(os.pathsep)

def executeCmd(argv, cwd=None):
    try:
        p = process.ProcessOpen(argv, cwd=cwd, env=userEnv)
        return [p.stdout.read(), p.stderr.read()]
    finally:
        p.close()

def findZipper():
    # look for zip or 7z
    if sys.platform.startswith('win'):
        exts = ['.exe']
    else:
        exts = None
    # get the current valid environment which is a combination of
    # the startup environment and modifications in komodo preferences
    for exe in [['zip','-Dr'], ['7z','a','-tzip']]:
        zip = which.whichall(exe[0], exts=exts, path=userPath)
        if zip:
            return exe
    else:
        prompt.alert("XPI Build Error","Unable to find 'zip' or '7z' on path")
        raise COMException(nsError.NS_ERROR_UNEXPECTED, "Unable to find 'zip' or '7z' on path")

def getExtVars(rdf_file):
    # parse install.rdf for the vars we want
    rdf_obj = parseString(open(rdf_file, 'r').read())
    ext_id = rdf_obj.getElementsByTagName('em:id')[0].firstChild.data
    ext_name = rdf_obj.getElementsByTagName('em:name')[0].firstChild.data
    ext_version = rdf_obj.getElementsByTagName('em:version')[0].firstChild.data
    return {
        'ext_id': ext_id,
        'ext_name': ext_name,
        'ext_version': ext_version
    }

# get extension data from install.rdf
projectFile = komodo.macro.project.getFile()

vars = getExtVars(os.path.join(projectFile.dirName, 'install.rdf'))

# build the xpi

dirs = ['content', 'skin', 'locale', 'components']
cmd = []
zipper = findZipper()
for dir in dirs:
    path = os.path.join(projectFile.dirName, dir);
    if os.path.exists(path):
        cmd = zipper + ['%s.jar' % vars['ext_name'], dir]
        executeCmd(cmd, projectFile.dirName)

cmd = zipper + ["%s-%s.xpi" % (vars['ext_name'], vars['ext_version']), '%s.jar' % vars['ext_name'], "install.rdf", "chrome.manifest"]
executeCmd(cmd, projectFile.dirName)

</macro>
<macro async="0" icon="chrome://komodo/content/icons/draw-cylinder.png" id="cecad032-3ef4-c84b-9095-dbb8bb55a10a" idref="ee7a694b-2e5c-074d-be2e-2c50ee32d548" keyboard_shortcut="" language="JavaScript" name="extension_lib" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    
var extensionLib = function() {
    this.os = Components.classes['@activestate.com/koOs;1'].
        getService(Components.interfaces.koIOs);
    this.error = false;
}

extensionLib.prototype.getPath = function(relative) {
    try {
        var prj_path = ko.interpolate.interpolateStrings('%p');
        path = this.os.path.join(prj_path, relative);
        return path;
    } catch(e) {
        alert(e+"\narg name: "+name);
    }
}

extensionLib.prototype.readFile = function(filename) {
    // read the template file
    try {
        var fileEx = Components.classes["@activestate.com/koFileEx;1"]
                .createInstance(Components.interfaces.koIFileEx);
        fileEx.URI = filename;
        fileEx.open('rb');
        var content = fileEx.readfile();
        fileEx.close();
        return content;
    } catch(e) {
        alert(e+"\narg filename: "+filename);
    }
}

extensionLib.prototype.writeFile = function(filename, content) {
    try {
        var fileEx = Components.classes["@activestate.com/koFileEx;1"]
                .createInstance(Components.interfaces.koIFileEx);
        fileEx.URI = filename;
        fileEx.open('wb+');
        fileEx.puts(content);
        fileEx.close();
    } catch(e) {
        alert(e+"\narg filename: "+filename);
    }
}

extensionLib.prototype.getRdfVars = function(txt) {
    try {
        var Rx = /\&lt;em\:([\w]+)[\ \S]*\&gt;([\S\ ]+?)\&lt;\//g;
        var ext_vars = {};
        while(results = Rx.exec(txt)) {
            var idRx = /type|min|max|\{/;
            if(!idRx.test(results[0])) { // filter out stuff we don't want
                ext_vars[results[1]] = results[2];
            }
        }
        return ext_vars;
    } catch(e) {
        alert(e+"\narg rdf_path: "+rdf_path);
    }
}

extensionLib.prototype.getManifestVars = function(txt) {
    try {
        var rx1 = /content ([\S]+?) jar\:([\S]+?)\.jar/g;
        var res1 = rx1.exec(txt);
        var rx2 = /chrome:\/\/([\S]+?)\/content\/overlay\.xul/g;
        var res2 = rx2.exec(txt);
        return new Array(res1[1], res1[2], res2[1]);
    } catch(e) {
        alert(e+"\narg path: "+path);
    }
}

extensionLib.prototype.getOverlayVars = function(txt) {
    try {
        var rx1 = /&lt;overlay id="([\S]+?)"/g;
        var res1 = rx1.exec(txt);
        var rx2 = /&lt;menuitem id="([\S]+?)"[\s]+?label="([\S\ ]+?)"/g;
        var res2 = rx2.exec(txt);
        return [res1[1], res2[1], res2[2]];
    } catch(e) {
        alert(e+"\narg path: "+path);
    }
}

extensionLib.prototype.updateProject = function(vars) {
    try {
        var overlayPath = this.getPath('content/overlay.xul');
        if(this.os.path.exists(overlayPath)) {
            var ovl_str = this.readFile(overlayPath);
            var ov_vars = this.getOverlayVars(ovl_str);
            var ovl_new = [vars.ext_name+'Overlay', 'menu_'+vars.ext_name, vars.name];
            this.writeFile(overlayPath, this.replaceAll(ov_vars, ovl_new, ovl_str));
        } else { this.error = "Doesn't exist: "+overlayPath; return false; }
        
        var manifestPath = this.getPath('chrome.manifest');
        if(this.os.path.exists(manifestPath)) {
            var man_str = this.readFile(manifestPath);
            var man_vars = this.getManifestVars(man_str);
            var man_new = [vars.ext_name, vars.ext_name, vars.ext_name];
            this.writeFile(manifestPath, this.replaceAll(man_vars, man_new, man_str));
        } else { this.error = "Doesn't exist: "+overlayPath; return false; }
        
        var rdf_path = this.getPath('install.rdf');
        if(this.os.path.exists(rdf_path)) {
            var rdf_str = this.readFile(rdf_path);
            var rdf_vars = this.getRdfVars(rdf_str);
            this.writeFile(rdf_path, this.replaceAll(rdf_vars, vars, rdf_str));
        } else { this.error = "Doesn't exist: "+overlayPath; return false; }
        
    } catch(e) {
        this.error = e;
        return false;
    }
    return true;
}

extensionLib.prototype.replaceAll = function(orig_vars, new_vars, str) {
    try {
        var out = str;
        for(v in orig_vars) {
            out = out.replace(orig_vars[v], new_vars[v]);
        }
        return out;
    } catch(e) {
        alert(e);
    }
}

extensionLib.prototype.getNiceName = function(name) {
    return this.trim(name).replace(/[\W]/g,'').toLowerCase();
}

extensionLib.prototype.trim = function(str) {
    return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

extensionLib.prototype.clone = function(obj) {
    var newobj = {}; for(i in obj) {
        newobj[i] = obj[i];
    } return newobj;
}

extensionLib.prototype._dump = function(obj) {
    var str = ''; for(i in obj) {
        str += i+': '+obj[i]+'\n';
    } return(str);
}

extensionLib.prototype._keys = function(obj) {
  var out = new Array(); for(i in obj) {
    out.push(i);
  } return out;
}

} catch(e) {
    allert(e);
}
</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/wrench.png" id="a2c48419-0594-1a4f-81c8-92bdc403c5e6" idref="ee7a694b-2e5c-074d-be2e-2c50ee32d548" keyboard_shortcut="" language="JavaScript" name="oncreate" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {

var libPart = ko.projects.findPart('macro', 'extension_lib', 'container');
eval(libPart.value);

var koExt = new extensionLib();

var project = ko.macros.current.project;

var setupWin = project.getChildByAttributeValue('name','setup.xul', 1);
var rdf = project.getChildByAttributeValue('name','install.rdf', 1);
var data = {};

var prefset = project.prefset;

if(prefset.hasPrefHere('configured')) {
    var rdf_xml = koExt.readFile(rdf.getFile().URI);
    data = {
        'valid': false,
        'configured': true,
        'vars': koExt.getRdfVars(rdf_xml)
    };
    data.vars['ext_name'] = koExt.getNiceName(data.vars.name);
} else { // init data
    data = {
        'valid': false,
        'configured': false,
        'vars': {
            'id': '',
            'name': 'My Extension',
            'creator': 'Me',
            'version': '0.1',
            'description': '',
            'homepageURL': '',
            'ext_name': ''
        }
    };
}

window.openDialog(
    setupWin.getFile().URI,
    "_blank",
    "centerscreen,chrome,resizable,scrollbars,dialog=no,close,modal=yes",
    data
);

if(data.valid) {
    if(koExt.updateProject(data.vars)) {
        prefset.setBooleanPref('configured', true);
        var part = project.getChildByAttributeValue('name', 'oncreate',1);
        if(part) { part.name = 'Configure'; }
        alert('Extension Project '+data.vars.name+' configured!');
    } else {
        alert('Error encountered: '+koExt.error+"\nConfiguration aborted.");
    }
}

} catch(e) {
    alert(e);
}
</macro>
<preference-set idref="10f7e3f4-96c5-3940-9564-5ef8e9eed9ce">
  <string id="extension_nice_name">Hello World</string>
  <string id="import_exclude_matches">*.*~;*.bak;*.tmp;CVS;.#*;*.pyo;*.pyc;.svn;*%*;.DS_Store;_prj_internal_</string>
  <boolean id="import_recursive">1</boolean>
  <string id="extension_name">helloworld</string>
  <string id="extension_homepage">http://yourdomain.com/extension</string>
  <string id="extension_description">A simple Hello World alert dialog</string>
  <string id="extension_author_name">Your Name</string>
  <string id="extension_author_domain">YourDomain.com</string>
  <boolean id="import_live">1</boolean>
  <string id="import_type">useFolders</string>
  <string id="extension_version">1.0</string>
  <string id="import_include_matches"></string>
  <string id="extension_update_url">http://yourdomain.com/extension/extension.rdf</string>
</preference-set>
</project>
