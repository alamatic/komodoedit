/* Copyright (C) 2010 ActiveState Software Inc.
   See the file LICENSE.txt for licensing information. */

#include "nsISupports.idl"
#include "nsITreeView.idl"
#include "koIPrefs.idl"
#include "koIProject.idl"

interface koIFileEx;
/* IDL for the hierarchical Toolbox2 view
 *
 */

[scriptable, uuid(5c022eab-9e93-41e9-a113-4aca20f3bcb5)]
interface koITool: koIPart_Common {
    // New:
    readonly attribute wstring toolType;
    attribute wstring keyboard_shortcut;

    attribute wstring path;
    attribute long favoriteRating;
    attribute long timesRun;
    attribute double lastRun;

    void save();

    //TODO: Implement
    attribute wstring tags;
    
    attribute koITool parent;
    /* is the tool my ancestor? */
    boolean isAncestor(in koITool tool);

};

[scriptable, uuid(1d1db2c4-8054-418d-a0d2-4b65c5039bb1)]
interface koIMacroTool: koITool {
};


[scriptable, uuid(f587b8c6-96ae-4af3-9362-a0fd40d541f7)]
interface koIToolbox2HTreeView: nsITreeView {
    void initialize();
    void terminate();
    wstring get_toolType(in long index);

    koITool getTool(in long index);
    koITool getToolById(in long id);
    koITool getToolFromPath(in wstring path);
    void getToolsWithKeyboardShortcuts([array, size_is(count)] out koITool tools,
                                       out unsigned long count);
    void getTriggerMacros([array, size_is(count)] out koITool tools,
                          out unsigned long count);
    long getIndexByTool(in koITool tool);
    boolean selectedItemsHaveSameParent();
    // Is the src node an ancestor of the target node?
    boolean isAncestor(in long srcIndex, in long targetIndex);
    
    koITool createToolFromType(in wstring type);

    // Eventually these should get moved to the tool, but for
    // now we're going to hit the database each time.
    wstring get_path(in long index);
    long get_favoriteRating(in long index);
    long get_timesRun(in long index);
    double get_lastRun(in long index);
    
    void addNewItemToParent(in koITool parent, in koITool item);
    void deleteToolAt(in long index);

    void copyLocalFolder(in wstring srcPath, in wstring targetDirPath);
    void pasteItemsIntoTarget(in long index,
                              [array, size_is(count)] in wstring paths,
                              in unsigned long count,
                              in boolean copying);
    long zipSelectionToFile(in wstring zipFile);
    long getNextSiblingIndex(in long index); // not in nsITreeView...
};

